[{"authors":null,"categories":null,"content":"Giovanni Pecoraro is a Senior Security Engineer at RHEA Group. His research interests include space systems, cyber security, signal processing and artificial intelligence.\n","date":1607817600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1607817600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Giovanni Pecoraro is a Senior Security Engineer at RHEA Group. His research interests include space systems, cyber security, signal processing and artificial intelligence.","tags":null,"title":"Giovanni Pecoraro","type":"authors"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber"],"content":"Introduction Windows Management Instrumentation (WMI) is Microsoftâ€™s implementation of Common Information Model (CIM) and Web-Based Enterprise Management (WBEM). WMI provides a unique interface for applications/scripts to manage a local or remote network or computer.\nWMI can be used for Red Teaming because:\nit is enabled on all Windows systems by default; it really mixes well with existing network traffic; it provides execution and persistence with SYSTEM privileges; it is often neglected by defenders. By default, the WMI service â€“ Winmgmt is running and listening on port 135. DCOM connections are established on port 135, while subsequent data exchanged on port dictated by HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Rpc\\\\Internet â€“ Ports (REG_MULTI_SZ) configurable via DCOMCNFG.exe.\nWMI Components Exploring commands WMI Commands - PowerShell v2 Get-Command -CommandType Cmdlet *wmi* | select name Get-WmiObject Invoke-WmiMethod Register-WmiEvent Remove-WmiObject Set-WmiInstance CIM Commands - PowerShell v3 CIM commands use WS-MAN so they can be used also against boxes where WMI is blocked but WS-MAN (WinRM) is enabled (even if the target has PowerShell version 2). They can be used also against non-Windows boxes.\nGet-Command -CommandType Cmdlet *cim* | select name Get-CimAssociatedInstance Get-CimClass Get-CimInstance Get-CimSession Invoke-CimMethod New-CimInstance New-CimSession New-CimSessionOption Register-CimIndicationEvent Remove-CimInstance Remove-CimSession Set-CimInstance WMI and CIM commands relations\nExploring namespaces within root namespace Get-WmiObject -Namespace \u0026#34;root\u0026#34; -Class \u0026#34;__Namespace\u0026#34; Get-WmiObject -Namespace \u0026#34;root\u0026#34; -Class \u0026#34;__Namespace\u0026#34; | select name Get-CimInstance -Namespace \u0026#34;root\u0026#34; -Class \u0026#34;__Namespace\u0026#34; | select name # Recursively list nested namespaces Get-WmiNamespace.ps1 Exploring classes and objects Once we have a namespace, we can explore its classes. Classes represent items in WMI like process, hardware, service, etc.\nGet classes If not specified, root/cim2 is the default namespace. Use -List parameter for Get-WmiObject.\nGet-WmiObject -Namespace root\\cimv2 -Class *bios* -List Get-WmiObject -Class *bios* -List Get-CimClass -Namespace root\\cimv2 -Class *bios* Get-CimClass -Class *bios* Get-CimClass -QualifierName dynamic Get instances of a class (objects) Get-WmiObject -Class Win32_BIOS Get-CimInstance -ClassName Win32_BIOS Filtering objects Get-WmiObject -Class Win32_Process -Filter \u0026#34;Name = \u0026#39;explorer.exe\u0026#39;\u0026#34; Get-CimInstance -ClassName Win32_Process -Filter \u0026#34;Name = \u0026#39;explorer.exe\u0026#39;\u0026#34; | fl * Get-WmiObject -Class Win32_Process | Where-Object {$_.Name -eq \u0026#34;explorer.exe\u0026#34;} Get-CimInstance -ClassName Win32_Process | Where-Object {$_.Name -eq \u0026#34;explorer.exe\u0026#34;} Get-WmiObject -Query \u0026#34;select * from Win32_Process where Name = \u0026#39;explorer.exe\u0026#39;\u0026#34; Get-CimInstance -Query \u0026#34;select * from Win32_Process where Name = \u0026#39;explorer.exe\u0026#39;\u0026#34; Example of WMI usage Get computer name, domain and local groups:\n# Explore namespaces to find the correct one Get-WmiObject -Namespace \u0026#34;root\u0026#34; -Class \u0026#34;__Namespace\u0026#34; | select name Get-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; # Computer name and domain Get-CimInstance -Namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_ComputerSystem | Format-List -Property * # Local groups Get-CimInstance -Namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_Group | Format-List -Property * List installed software:\nGet-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_Product | Format-List -Property * Get installed antivirus:\nGet-CimClass -Namespace \u0026#34;root/SecurityCenter2\u0026#34; Get-CimInstance -namespace \u0026#34;root/SecurityCenter2\u0026#34; -ClassName AntiVirusProduct | Format-List -Property * List files and folders:\nGet-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; # Files Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName CIM_DataFile | Format-List -Property * # Shared folders Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_Share | Format-List -Property * # Local folders Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_Directory | Format-List -Property * Get security logs:\nGet-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_NTEventLogFile | Format-List -Property * Get networking configuration:\nGet-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_NetworkAdapter | Format-List -Property * Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_NetworkAdapterConfiguration | Format-List -Property * List services:\nGet-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_Service List scheduled tasks:\nGet-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_ScheduledJob List installed patches:\nGet-WmiObject -Namespace \u0026#34;root\u0026#34; -Class \u0026#34;__Namespace\u0026#34; | select name Get-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_QuickFixEngineering | Format-List -Property * List processes:\nGet-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; Get-CimInstance â€¦","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"488a156702e79c674df9532e6ee8878f","permalink":"https://www.peco602.com/post/wmi-cheatsheet/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/wmi-cheatsheet/","section":"post","summary":"Welcome ðŸ‘‹ We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Red Team","Windows","Active Directory"],"title":"Windows Management Instrumentation (WMI) Cheatsheet","type":"post"}]